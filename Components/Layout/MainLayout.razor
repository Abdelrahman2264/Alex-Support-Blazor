@inherits LayoutComponentBase
@attribute [Authorize]
@inject NavigationManager NavigationManager
@implements IDisposable

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <link rel="stylesheet" href="style.css">
    <!-- Add Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script type="text/javascript" src="app.js" defer></script>
</head>
<body>
    <style>
        .logo img {
            transition: transform 0.3s ease-in-out;
        }

        .logo:hover img {
            transform: rotate(-35deg);
        }

        .active {
            background-color: rgba(255, 255, 255, 0.1);
            border-left: 3px solid #fff;
        }

        .active-parent {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .sub-menu .active {
            background-color: rgba(255, 255, 255, 0.05);
            border-left: 2px solid #ccc;
        }
    </style>
    <nav id="sidebar">
        <ul class="start-0">
            <li>
                <a href="home" class="logo d-flex align-items-center gap-1">
                    <img src="Images/WhiteLogo.png" alt="Logo" style="width: 48px; height: 48px;">
                    <span style="color: white; font-weight: bold; font-size: 22px;">lex Support</span>
                </a>

                <button onclick="toggleSidebar()" id="toggle-btn">
                    <i class="fa-solid fa-arrow-left"></i>
                </button>
            </li>
            <li class="@GetActiveClass("/home")">
                <a href="/home">
                    <i class="fas fa-home"></i>
                    <span>Home</span>
                </a>
            </li>
            <li class="@GetActiveClass("/dashboard")">
                <a href="/dashboard">
                    <i class="fas fa-chart-pie"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li class="@GetParentActiveClass("/Sites", "/Departments", "/Categories")">
                <button onclick="toggleSubMenu(this)" class="dropdown-btn">
                    <i class="fas fa-folder"></i>
                    <span>Basics</span>
                    <i class="fas fa-chevron-down"></i>
                </button>
                <ul class="sub-menu">
                    <div>
                    <li class="@GetActiveClass("/Sites")"><a href="/Sites"><i class="fas fa-map-marker-alt"></i> Locations</a></li>
                    <li class="@GetActiveClass("/Departments")"><a href="/Departments"><i class="fas fa-building"></i> Departments</a></li>
                    <li class="@GetActiveClass("/Categories")"><a href="/Categories"><i class="fas fa-tags"></i> Categories</a></li>
                    </div>
                </ul>
            </li>
            <li class="@GetParentActiveClass("/Tickets", "/DailyTasks")">
                <button onclick="toggleSubMenu(this)" class="dropdown-btn">
                    <i class="fas fa-ticket-alt"></i>
                    <span>Tickets</span>
                    <i class="fas fa-chevron-down"></i>
                </button>
                <ul class="sub-menu">
                    <div>
                    <li class="@GetActiveClass("/createticket")"><a href="/createticket"><i class="fas fa-plus-circle"></i> Create Ticket</a></li>
                    <li class="@GetActiveClass("/Assigned")"><a href="/Assigned"><i class="fas fa-user-check"></i> Assigned Ticket</a></li>
                    <li class="@GetActiveClass("/Escalated")"><a href="/Escalated"><i class="fas fa-level-up-alt"></i> Escalated Ticket</a></li>
                    <li class="@GetActiveClass("/Tickets")"><a href="/Tickets"><i class="fas fa-envelope-open"></i> Open Tickets</a></li>
                    <li class="@GetActiveClass("/DailyTasks")"><a href="/DailyTasks"><i class="fas fa-tasks"></i> Periodic Tasks</a></li>
                    <li class="@GetActiveClass("/Closed")"><a href="/Closed"><i class="fas fa-check-circle"></i> Closed Tickets</a></li>
                    </div>
                </ul>
            </li>
            <AuthorizeView Roles="Admin,Agent">
                <li class="@GetActiveClass("/PerformanceKPIs")">
                    <a href="/PerformanceKPIs">
                        <i class="fas fa-chart-line"></i>
                        <span>Performance KPIs</span>
                    </a>
                </li>
            </AuthorizeView>

            <li class="@GetActiveClass("/SystemUsers")">
                <a href="/SystemUsers">
                    <i class="fas fa-users-cog"></i>
                    <span>System Users</span>
                </a>
            </li>
            <li class="@GetActiveClass("/profile")">
                <a href="/profile">
                    <i class="fas fa-user-cog"></i>
                    <span>Profile</span>
                </a>
            </li>

            <li class="@GetActiveClass("/About")">
                <a href="/About">
                    <i class="fas fa-info-circle"></i>
                    <span>About</span>
                </a>
            </li>
            <li class="@GetActiveClass("/ContactUs")">
                <a href="/ContactUs">
                    <i class="fas fa-envelope"></i>
                    <span>Contact Us</span>
                </a>
            </li>
            <li class="@GetActiveClass("/FAQ")">
                <a href="/FAQ">
                    <i class="fas fa-question-circle"></i>
                    <span>FAQ</span>
                </a>
            </li>
            <li class="@GetActiveClass("/UserGuide")">
                <a href="/UserGuide">
                    <i class="fas fa-book-open"></i>
                    <span>User Guide</span>
                </a>
            </li>
            <li>
                <a href="/signout">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Sign Out</span>
                </a>
            </li>
        </ul>
    </nav>
    <main>
        <Note />
        <NotificationBell></NotificationBell>
        @Body
    </main>
</body>
</html>
<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<script>
    const toggleButton = document.getElementById('toggle-btn');
    const sidebar = document.getElementById('sidebar');

    // Sidebar toggle functions
    function toggleSidebar() {
        const isSmallScreen = window.matchMedia('(max-width: 960px) and (max-height: 600px), (max-width: 600px) and (max-height: 960px)').matches;

        if (!isSmallScreen) {
            sidebar.classList.toggle('close');
            toggleButton.classList.toggle('rotate');

            // Get the icon element inside the button
            const icon = toggleButton.querySelector('i');

            // Toggle between left and right arrow
            if (sidebar.classList.contains('close')) {
                icon.classList.remove('fa-arrow-left');
                icon.classList.add('fa-arrow-right');
                closeAllSubMenus();
            } else {
                icon.classList.remove('fa-arrow-right');
                icon.classList.add('fa-arrow-left');
            }
        }
    }

    function toggleSubMenu(button) {
        const isSmallScreen = window.matchMedia('(max-width: 960px) and (max-height: 600px), (max-width: 600px) and (max-height: 960px)').matches;

        if (!isSmallScreen) {
            const wasClosed = !button.nextElementSibling.classList.contains('show');

            if (wasClosed) {
                closeAllSubMenus();
            }

            button.nextElementSibling.classList.toggle('show');
            button.classList.toggle('rotate');

            if (sidebar.classList.contains('close')) {
                sidebar.classList.toggle('close');
                toggleButton.classList.toggle('rotate');
            }
        }
    }

    function closeAllSubMenus() {
        Array.from(sidebar.getElementsByClassName('show')).forEach(ul => {
            // Only close if it doesn't contain an active item
            if (!ul.querySelector('.active')) {
                ul.classList.remove('show');
                ul.previousElementSibling.classList.remove('rotate');
            }
        });
    }

    function handleResize() {
        const isSmallScreen = window.matchMedia('(max-width: 960px) and (max-height: 600px), (max-width: 600px) and (max-height: 960px)').matches;

        if (isSmallScreen && !sidebar.classList.contains('close')) {
            sidebar.classList.add('close');
            toggleButton.classList.add('rotate');
            closeAllSubMenus();
        }
    }



    // Initialize on load
    document.addEventListener('DOMContentLoaded', function() {
        const isSmallScreen = window.matchMedia('(max-width: 960px) and (max-height: 600px), (max-width: 600px) and (max-height: 960px)').matches;

        if (isSmallScreen && !sidebar.classList.contains('close')) {
            sidebar.classList.add('close');
            toggleButton.classList.add('rotate');
        }

    });

    window.addEventListener('resize', handleResize);


</script>
@code {
    private string currentUrl = string.Empty;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.Uri;
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = e.Location;
        StateHasChanged();
    }

    private string GetActiveClass(string path)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(currentUrl);
        return relativePath.StartsWith(path.TrimStart('/'), StringComparison.OrdinalIgnoreCase)
            ? "active" : string.Empty;
    }

    private string GetParentActiveClass(params string[] paths)
    {
        var relativePath = NavigationManager.ToBaseRelativePath(currentUrl);
        return paths.Any(p => relativePath.StartsWith(p.TrimStart('/'), StringComparison.OrdinalIgnoreCase))
            ? "active-parent" : string.Empty;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}