@page "/Sites"
@inject ILocationRepository _ISite
@inject IJSRuntime JS
@using AlexSupport.ViewModels
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,Agent")]
<PageTitle>Sites</PageTitle>

<BsModal OnModalConfirmation="ConfirmDelete_Click"
         IconClass="fas fa-trash-alt"
         IconColorClass="text-danger"
         ButtonBootstrapStyle="btn-danger"
         Title="Inactive Location">
    <ChildContent>
        This action cannot be undone until you confirm it. Are you sure you want to inactive this location?
    </ChildContent>
</BsModal>
@if (isProcessing)
{
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex flex-column align-items-center justify-content-center bg-white bg-opacity-75 z-index-1050">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Processing...</p>
    </div>
}
else
{
    <div class="container-fluid px-4 py-3">
        <div class="card border-0 shadow-lg rounded-3 overflow-hidden">
            <div class="card-header bg-primary-gradient py-4">
                <div class="row align-items-center">
                    <div class="col-12 col-md-6 col-lg-4">
                        <h2 class="text-white mb-3 mb-md-0">
                            <i class="bi bi-geo-alt me-2"></i>Sites Location List
                        </h2>
                    </div>
                    <div class="col-12 col-md-6 col-lg-8">
                        <div class="d-flex flex-column flex-md-row gap-3">
                            <div class="flex-grow-1">
                                <div class="input-group input-group-lg">
                                    <span class="input-group-text bg-white border-end-0">
                                        <i class="bi bi-search text-muted"></i>
                                    </span>
                                    <input type="text"
                                           class="form-control border-start-0 shadow-none"
                                           placeholder="Search sites..."
                                           @bind="searchTerm"
                                           @oninput="HandleSearchInput" />
                                    @if (!string.IsNullOrEmpty(searchTerm))
                                    {
                                        <button class="btn btn-outline-secondary" type="button" @onclick="ClearSearch">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                            <AuthorizeView Roles="Admin">
                                <div class="d-flex justify-content-end">
                                    <a href="Sites/Create" class="btn btn-light btn-lg rounded-pill w-100 w-md-auto">
                                        <i class="bi bi-plus-circle me-2"></i>Add New Site
                                    </a>
                                </div>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-body p-4">
                @if (FilteredSites.Any())
                {
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
                        @foreach (var obj in FilteredSites)
                        {
                            <div class="col">
                                <div class="card h-100 border-0 shadow-sm transition-all hover-shadow">
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex align-items-center mb-3">
                                            <div class="bg-primary bg-opacity-10 rounded p-2 me-3">
                                                <i class="bi bi-geo text-primary fs-4"></i>
                                            </div>
                                            <h4 class="card-title mb-0 text-truncate">@obj.LocationName</h4>
                                        </div>
                                        <div class="mt-auto pt-3">
                                            <AuthorizeView Roles="Admin">
                                                <Authorized>
                                                    <div class="d-flex gap-2">
                                                        <a href="@($"Sites/update/{obj.LID}")"
                                                           class="btn btn-outline-primary btn-sm rounded-pill flex-grow-1">
                                                            <i class="bi bi-pencil-square me-1"></i>Edit
                                                        </a>
                                                        <button type="button"
                                                                class="btn btn-outline-danger btn-sm rounded-pill flex-grow-1"
                                                                @onclick="() => HandleDelete(obj.LID)">
                                                            <i class="bi bi-trash3 me-1"></i>Delete
                                                        </button>
                                                    </div>
                                                </Authorized>
                                                <NotAuthorized>
                                                    <div class="d-flex gap-2">
                                                        <button class="btn btn-outline-secondary btn-sm rounded-pill flex-grow-1 disabled" disabled>
                                                            <i class="bi bi-pencil-square me-1"></i>Edit
                                                        </button>
                                                        <button class="btn btn-outline-secondary btn-sm rounded-pill flex-grow-1 disabled" disabled>
                                                            <i class="bi bi-trash3 me-1"></i>Delete
                                                        </button>
                                                    </div>
                                                </NotAuthorized>
                                            </AuthorizeView>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="mb-4">
                            <i class="bi bi-geo-alt text-muted" style="font-size: 3rem;"></i>
                        </div>
                        <h4 class="text-muted mb-3">
                            @(string.IsNullOrEmpty(searchTerm)
                                ? "No Sites Found"
                                : "No matching sites found")
                        </h4>
                        <p class="text-muted">
                            @(string.IsNullOrEmpty(searchTerm)
                                ? "Start by adding your first site location"
                                : "Try a different search term")
                        </p>
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <a href="Sites/Create" class="btn btn-primary rounded-pill px-4">
                                    <i class="bi bi-plus-circle me-2"></i>Add Site
                                </a>
                            </Authorized>
                            <NotAuthorized>
                                <button class="btn btn-secondary rounded-pill px-4 disabled" disabled>
                                    <i class="bi bi-plus-circle me-2"></i>Add Site
                                </button>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                }
            </div>
        </div>
    </div>
}

<style>
    .bg-primary-gradient {
        background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);
    }

    .transition-all {
        transition: all 0.2s ease-in-out;
    }

    .hover-shadow:hover {
        box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.1) !important;
        transform: translateY(-2px);
    }

    .z-index-1050 {
        z-index: 1050;
    }

    .card-title {
        font-weight: 500;
    }

    .rounded-3 {
        border-radius: 0.75rem !important;
    }

    .rounded-pill {
        border-radius: 50rem !important;
    }

    .disabled {
        opacity: 0.65;
        cursor: not-allowed;
    }

    /* Search input enhancements */
    .input-group-text {
        transition: all 0.3s ease;
    }

    .form-control:focus {
        box-shadow: none;
        border-color: #dee2e6;
    }

        .form-control:focus + .input-group-text {
            color: #0d6efd;
        }

    /* Animation for search results */
    .col {
        animation: fadeIn 0.3s ease-out;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    private bool isProcessing { get; set; } = false;
    private IEnumerable<Location> Sites { get; set; } = new List<Location>();
    private IEnumerable<Location> FilteredSites { get; set; } = new List<Location>();
    private int AssignId { get; set; }
    private string searchTerm = string.Empty;
    private Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        await LoadTypes();
        isProcessing = false;
    }

    private async Task LoadTypes()
    {
        Sites = await _ISite.AllLocationsAsync();
        FilteredSites = Sites;
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid too many rapid updates
        debounceTimer?.Dispose();
        debounceTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterSites();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void FilterSites()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            FilteredSites = Sites;
        }
        else
        {
            var term = searchTerm.ToLower();
            FilteredSites = Sites.Where(s =>
                s.LocationName.ToLower().Contains(term)).ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FilteredSites = Sites;
    }

    private async Task HandleDelete(int id)
    {
        AssignId = id;
        await JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isProcessing = true;
        await JS.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && AssignId != 0)
        {
            var result = await _ISite.DeleteLocationAsync(AssignId);
            if (result)
                JS?.ToastrSuccess("Location Site Deleted Successfully");
            else
                JS?.ToastrError("Error Encountered While Deleting");

            await LoadTypes();
        }
        AssignId = 0;
        isProcessing = false;
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}





@code {
    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Locations");

        // Add headers
        worksheet.Cell(1, 1).Value = "Location ID";
        worksheet.Cell(1, 2).Value = "Name";
        worksheet.Cell(1, 3).Value = "Created Date";
        worksheet.Cell(1, 4).Value = "IsActive";


        // Add data
        int row = 2;
        foreach (var site in FilteredSites)
        {
            worksheet.Cell(row, 1).Value = site.LID;
            worksheet.Cell(row, 2).Value = site.LocationName;
            worksheet.Cell(row, 3).Value = site.CreatedDate;
            worksheet.Cell(row, 4).Value = site.isActive == true ? "Active" : "Inactive";
            row++;
        }

        // Create a new workbook and worksheet

        // Set the header row style
        var headerRow = worksheet.Range(1, 1, 1, worksheet.LastColumnUsed().ColumnNumber());
        headerRow.SetAutoFilter(true);
        headerRow.Style.Font.Bold = true;
        headerRow.Style.Font.FontColor = XLColor.Black;
        headerRow.Style.Fill.BackgroundColor = XLColor.OrangeColorWheel;
        headerRow.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        headerRow.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Apply borders to the entire worksheet

        worksheet.RangeUsed().Style.Border.OutsideBorder = XLBorderStyleValues.Thick;
        worksheet.RangeUsed().Style.Border.InsideBorder = XLBorderStyleValues.Thick;

        // Set the font and alignment for all cells
        worksheet.Style.Font.FontName = "Arial";
        worksheet.Style.Font.FontSize = 10;
        headerRow.Style.Font.FontSize = 10;

        worksheet.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
        worksheet.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Auto-adjust column width and row height
        worksheet.Columns().AdjustToContents();
        worksheet.Rows().AdjustToContents();

        // Save the file to a memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        var fileBytes = stream.ToArray();
        var fileName = $"Locations{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        // Trigger download in Blazor
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
    }

}
<button class="btn btn-success mx-1" @onclick="ExportToExcel">
    <i class="bi bi-file-earmark-excel"></i> Export to Excel
</button>