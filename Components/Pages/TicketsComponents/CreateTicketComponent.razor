@page "/tickets/createticket"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using AlexSupport.ViewModels
@inject ITicketRepository _ITicket
@inject ILocationRepository _ILocation
@inject ICategoryRepository _ICategory
@inject NavigationManager Navigation
@inject IWebHostEnvironment _env

<h3>Create New Ticket</h3>

<div class="ticket-form-container">
    <EditForm Model="@ticket" OnValidSubmit="HandleSubmit" class="needs-validation" novalidate FormName="CreateTicket">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3">
            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputText @bind-Value="ticket.Subject" class="form-control" id="subject" placeholder=" " />
                    <label for="subject">Subject*</label>
                    <ValidationMessage For="@(() => ticket.Subject)" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="ticket.CategoryID" class="form-select" id="category">
                        <option value="">Select Category</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.CID">@category.CategoryName</option>
                        }
                    </InputSelect>
                    <label for="category">Category*</label>
                    <ValidationMessage For="@(() => ticket.CategoryID)" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="ticket.LID" class="form-select" id="location">
                        <option value="">Select Location</option>
                        @foreach (var location in Locations)
                        {
                            <option value="@location.LID">@location.LocationName</option>
                        }
                    </InputSelect>
                    <label for="location">Location*</label>
                    <ValidationMessage For="@(() => ticket.LID)" />
                </div>
            </div>



            <div class="col-12">
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="ticket.Issue" class="form-control" id="description"
                    placeholder=" " style="height: 150px;"></InputTextArea>
                    <label for="description">Issue Description*</label>
                    <ValidationMessage For="@(() => ticket.Issue)" />
                </div>
            </div>



            <div class="col-12 d-flex justify-content-end gap-2">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                <button type="submit" class="btn btn-primary">Submit Ticket</button>
            </div>
        </div>
    </EditForm>
</div>

<style>
    .ticket-form-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    @@media (max-width: 768px) {
    .ticket-form-container {
    padding: 15px;
    }
    }
</style>

@code {
    private List<IBrowserFile> Attachments = new();
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Location> Locations = new List<Location>();
    private Ticket ticket { get; set; } = new Ticket();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        Categories = await _ICategory.AllCategoriesAsync();
        Locations = await _ILocation.AllLocationsAsync();
    }
    private async Task HandleSubmit()
    {
        await _ITicket.CreateTicketAsync(ticket);
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/tickets");
    }


  



}