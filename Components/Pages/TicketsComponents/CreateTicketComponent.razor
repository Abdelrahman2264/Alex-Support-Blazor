@page "/tickets/createticket"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject ITicketRepository _ITicket
@inject ILocationRepository _ILocation
@inject ICategoryRepository _ICategory
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3 class="page-title">Create New Ticket</h3>
<div class="ticket-form-container">
    <EditForm Model="@ticket" OnValidSubmit="HandleSubmit" FormName="CreateTicket">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />

        <div class="form-grid">
            <!-- First Row -->
            <div class="form-group">
                <label for="subject" class="form-label">Subject*</label>
                <InputText @bind-Value="ticket.Subject" class="form-control" id="subject" />
                <ValidationMessage For="@(() => ticket.Subject)" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="category" class="form-label">Category*</label>
                <InputSelect @bind-Value="ticket.CategoryID" class="form-control" id="category">
                    <option value="">Select Category</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.CID">@category.CategoryName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => ticket.CategoryID)" class="validation-message" />
            </div>

            <!-- Second Row -->
            <div class="form-group">
                <label for="location" class="form-label">Location*</label>
                <InputSelect @bind-Value="ticket.LID" class="form-control" id="location">
                    <option value="">Select Location</option>
                    @foreach (var location in Locations)
                    {
                        <option value="@location.LID">@location.LocationName</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => ticket.LID)" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="priority" class="form-label">Priority*</label>
                <InputSelect @bind-Value="ticket.Priority" class="form-control" id="priority">
                    <option value="0">Select Priority</option>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                    <option value="Urgent">Urgent</option>
                </InputSelect>
                <ValidationMessage For="@(() => ticket.Priority)" class="validation-message" />
            </div>

            <!-- Description -->
            <div class="form-group full-width">
                <label for="description" class="form-label">Issue Description*</label>
                <InputTextArea @bind-Value="ticket.Issue" class="form-control" id="description" rows="5" />
                <ValidationMessage For="@(() => ticket.Issue)" class="validation-message" />
            </div>

            <!-- Image Upload -->
            <div class="form-group full-width">
                @if (string.IsNullOrEmpty(imagePreviewUrl)){
                <label class="form-label">Attach Image (Optional)</label>
                <div class="file-upload-container">
                    <InputFile class="file-upload-input" OnChange="HandleImageUpload" accept=".png,.jpg,.jpeg,.gif" />
                    <div class="file-upload-label">
                        <i class="bi bi-cloud-arrow-up"></i>
                        <span>Click to browse or drag files here</span>
                        <small class="file-size-info">Max file size: 5MB</small>
                    </div>
                    @if (isUploading)
                    {
                        <div class="upload-progress">
                            <div class="progress-bar" role="progressbar"></div>
                            <span>Uploading...</span>
                        </div>
                    }
                </div>
                }
                @if (!string.IsNullOrEmpty(imagePreviewUrl))
                {
                    <div class="image-preview">
                        <div class="preview-container">
                            <img src="@imagePreviewUrl" alt="Preview" />
                            <button type="button" class="btn-remove-image" @onclick="RemoveImage">
                                <i class="bi bi-x-circle"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>

            <!-- Form Actions -->
            <div class="form-actions full-width">
                <button type="button" class="btn btn-cancel" @onclick="Cancel">
                    <i class="bi bi-x-lg"></i> Cancel
                </button>
                <button type="submit" class="btn btn-submit" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <i class="bi bi-check-lg"></i>
                        <span>Submit Ticket</span>
                    }
                </button>
            </div>
        </div>
    </EditForm>
</div>

<style>
    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: var(--border-radius);
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition);
        border: none;
        cursor: pointer;
    }

    .btn-cancel {
        background-color: #6c757d;
        color: white;
    }

        .btn-cancel:hover {
            background-color: #5a6268;
        }

    .btn-submit {
        background-color: var(--primary-color);
        color: white;
    }

        .btn-submit:hover {
            background-color: var(--secondary-color);
        }

        .btn-submit:disabled {
            background-color: #adb5bd;
            cursor: not-allowed;
        }
</style>

@code {
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<Location> Locations = new List<Location>();
    [SupplyParameterFromForm]
    private Ticket ticket { get; set; } = new Ticket();

    // Image handling
    private string? imagePreviewUrl;
    private bool isUploading = false;
    private bool isSubmitting = false;
    private const int maxFileSize = 5 * 1024 * 1024; // 5MB
    private readonly string[] allowedContentTypes = new[] { "image/jpeg", "image/png", "image/gif" };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            Categories = await _ICategory.AllCategoriesAsync();
            Locations = await _ILocation.AllLocationsAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        isUploading = true;
        StateHasChanged();

        try
        {
            var file = e.File;
            if (file == null) return;

            // Validate file
            if (file.Size > maxFileSize)
            {
                await JS.ToastrError("File size exceeds 5MB limit");
                return;
            }

            if (!allowedContentTypes.Contains(file.ContentType))
            {
                await JS.ToastrError("Only JPG, PNG, or GIF images are allowed");
                return;
            }

            // Process image
            var resizedImage = await file.RequestImageFileAsync(file.ContentType, 800, 800);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream(maxFileSize).ReadAsync(buffer);

            // Update UI and model
            imagePreviewUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);
            ticket.ImageData = memoryStream.ToArray();
            ticket.ImageContentType = file.ContentType;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error processing image: {ex.Message}");
            await JS.ToastrError("Error processing image");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private void RemoveImage()
    {
        imagePreviewUrl = null;
        ticket.ImageData = null;
        ticket.ImageContentType = null;
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        StateHasChanged();

        try
        {
            await _ITicket.CreateTicketAsync(ticket);
            await JS.ToastrSuccess("Ticket created successfully");
            Navigation.NavigateTo("/tickets");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating ticket: {ex.Message}");
            await JS.ToastrError($"Failed to create ticket try again");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/tickets");
    }
}