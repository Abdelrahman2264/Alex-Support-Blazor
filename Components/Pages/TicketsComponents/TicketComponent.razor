@page "/Tickets"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ITicketRepository _ITicket
@inject IAppUserRepoistory _IAppUser
@rendermode InteractiveServer
@inject IJSRuntime JS

<AssignFormModal Title="Assign Ticket"
        
                 OnModalConfirmation="ConfirmAssign_Click"
                 Agents="agents"/>
<div class="tickets-container">
    @if (tickets == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!tickets.Any())
    {
        <div class="alert alert-info">
            No tickets found
        </div>
    }
    else
    {
        @foreach (var ticket in tickets)
        {
<div class="ticket-card card mb-3 w-100">
    <div class="card-header d-flex justify-content-between align-items-center p-3">
        <div class="d-flex align-items-center gap-3">
                        <span class="badge @GetStatusClass(ticket.Status)">@ticket.Status</span>
            <div>
                            <h6 class="mb-0">Ticket #@ticket.TID</h6>
                            <small class="text-muted">@ticket?.category?.CategoryName • @ticket.OpenDate.ToString("MMM dd, yyyy")</small>
            </div>
        </div>
        <div class="d-flex gap-2">

            <button class="btn btn-sm btn-outline-secondary"
                    onclick="toggleCollapse(this)">
                ▼ Details
            </button>
        </div>
    </div>

    <div class="card-body p-3 collapse-body" style="display: none;">
        <div class="row">
            <div class="col-md-6">
                <div class="mb-2">
                    <span class="text-muted">Priority:</span>
                                <span class="badge @GetPriorityClass(ticket.Priority) ms-2">@ticket.Priority</span>
                </div>
                <div class="mb-2">
                    <span class="text-muted">Assigned To:</span>
                                @if (ticket.Agent != null)
                                {
                                    <span class="badge btn-action-active ms-2">@ticket.Agent.Fname @ticket.Agent.Lname</span>
                                }
                                else
                                {
                                    <span class="badge btn-action-inactive ms-2">Not Assigned Yet !</span>
                                }

                </div>

            </div>
            <div class="col-md-6">
                <div class="mb-2">
                    <span class="text-muted">Created By:</span>
                                <span>@ticket.User.Fname @ticket.User.Lname</span>
                </div>
                <div class="mb-2">
                                <span class="text-muted">Subject:</span>
                                <span>@ticket.Subject</span>
                </div>

            </div>
        </div>

        <div class="mt-3 p-2 bg-light rounded">
                        <h6 class="text-muted">Issue Description:</h6>
                        <p class="mb-0">@ticket.Issue</p>
        </div>

        <div class="card-footer p-3 d-flex justify-content-end gap-2">
                        <button class="btn btn-sm btn-outline-primary">Details</button>
                        <button type="button" class="btn btn-sm btn-primary" @onclick="()=>HandleAssign(ticket.TID)">Assign</button>
        </div>
    </div>
</div>
        }
    }
</div>

<style>
    .tickets-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .ticket-card {
        border-left: 4px solid;
        border-left-color: var(--status-border-color);
        transition: all 0.3s ease;
    }

        .ticket-card:hover {
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            transform: translateY(-2px);
        }

    .badge-status-open {
        background-color: #0d6efd;
        --status-border-color: #0d6efd;
    }

    .badge-status-Assigned {
        background-color: green;
        --status-border-color: green;
    }

    .badge-status-Esclated {
        background-color: #a98004;
        --status-border-color: #a98004;
    }

    .badge-priority-high {
        background-color: #dc3545;
    }

    .badge-priority-medium {
        background-color: #ffc107;
        color: #000;
    }

    .badge-priority-low {
        background-color: #198754;
    }

    .btn-action-active {
        background-color: #198754;
        color: white;
    }

    .btn-action-inactive {
        background-color: #6c757d;
        color: white;
    }

    .collapse-body {
        transition: all 0.3s ease;
    }
</style>



@code {
    private IEnumerable<Ticket>? tickets = new List<Ticket>();
    private IEnumerable<AppUser>? agents = new List<AppUser>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTickets();
    }
    private async Task LoadTickets()
    {
        tickets = await _ITicket.GetAllOpendTicketsAsync();
        agents = await _IAppUser.GetAllAgentsAsync();
    }
    private string GetStatusClass(string status) => status switch
    {
        "Open" => "badge-status-open",
        "Assigned" => "badge-status-Assigned",
        "Esclated" => "badge-status-Esclated",
        _ => "bg-secondary"
    };

    private string GetPriorityClass(string priority) => priority switch
    {
        "Urgent" => "badge-priority-high",
        "High" => "badge-priority-medium",
        "Medium" => "badge-priority-low",
        _ => "bg-secondary"
    };
    private int DeletedId { get; set; }
    private async Task HandleAssign(int id)
    {
        DeletedId = id;
        await JS.InvokeVoidAsync("ShowAssignTicketFormModal"); // Show modal
    }

    private async Task ConfirmAssign_Click(Ticket ticket)
    {
        await JS.InvokeVoidAsync("HideAssignTicketFormModal"); // Hide modal

        if (DeletedId != 0)
        {
            var temp = await _ITicket.GetTicketByIdAsync(DeletedId);
            var result = await _ITicket.AssignTicketAsync(ticket, DeletedId);
            if (result)
    {
                JS?.ToastrSuccess("Ticket Assigned Successfully");

            }
            else
                JS?.ToastrError("Error Encountered while Assigning");

            await LoadTickets();
        }
        DeletedId = 0;
    }
}
