@page "/tickets"
@page "/{TicketStatus}"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ITicketRepository _ITicket
@inject IAppUserRepoistory _IAppUser
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject INotificationService NotificationService
@attribute [Authorize]

<AssignFormModal Title="@(!string.IsNullOrWhiteSpace(TicketStatus) ? "Re-Assign Ticket" : "Assign Ticket")"
                 OnModalConfirmation="ConfirmAssign_Click"
                 Agents="agents" />
<style>
    :root {
        --primary-color: #4361ee;
        --primary-light: #eef2ff;
        --success-color: #10b981;
        --success-light: #ecfdf5;
        --danger-color: #ef4444;
        --danger-light: #fef2f2;
        --warning-color: #f59e0b;
        --warning-light: #fffbeb;
        --info-color: #3b82f6;
        --info-light: #eff6ff;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-700: #374151;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --transition-base: all 0.2s ease-in-out;
    }

    /* Ticket Card Styles */
    .ticket-card {
        border-left: 4px solid;
        border-left-color: var(--status-border-color);
        transition: var(--transition-base);
        margin-bottom: 1.5rem;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: var(--shadow-sm);
    }

        .ticket-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-md);
        }

    /* Status Badges */
    .badge-status-open {
        background-color: var(--info-light);
        color: white;
        --status-border-color: var(--info-color);
    }

    .badge-status-assigned {
        background-color: var(--success-light);
        color: var(--success-color);
        --status-border-color: var(--success-color);
    }

    .badge-status-escalated {
        background-color: var(--warning-light);
        color: var(--warning-color);
        --status-border-color: var(--warning-color);
    }

    .badge-status-closed {
        background-color: var(--danger-light);
        color: white;
        --status-border-color: var(--danger-color);
    }

    /* Priority Badges */
    .badge-priority-low {
        background-color: var(--success-light);
        color: var(--success-color);
    }

    .badge-priority-medium {
        background-color: var(--warning-light);
        color: var(--warning-color);
    }

    .badge-priority-high {
        background-color: #f97316;
        color: white;
    }

    .badge-priority-urgent {
        background-color: var(--danger-light);
        color: var(--danger-color);
    }

    /* Action Buttons */
    .btn-action-active {
        background-color: var(--success-light);
        color: var(--success-color);
        border: 1px solid var(--success-color);
    }

    .btn-action-inactive {
        background-color: var(--gray-100);
        color: var(--gray-700);
        border: 1px solid var(--gray-300);
    }

    /* Collapse Animation */
    .collapse-body {
        transition: all 0.3s ease;
        overflow: hidden;
    }

    /* Header Styles */
    .page-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, white 100%);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow-sm);
        margin-bottom: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: white;
        margin: 0;
    }

    .page-icon {
        font-size: 2rem;
        color: white;
        margin-right: 1rem;
    }

    /* Search and Actions */
    .search-container {
        position: relative;
        width: 100%;
        max-width: 400px;
    }

    .search-input {
        border-radius: 50px;
        padding: 0.625rem 1.5rem 0.625rem 3rem;
        border: 1px solid var(--gray-200);
        font-size: 0.9375rem;
        transition: var(--transition-base);
        width: 100%;
    }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

    .search-icon {
        position: absolute;
        left: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--gray-300);
    }

    .clear-search {
        position: absolute;
        right: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--gray-400);
        cursor: pointer;
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 2rem;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
    }

    .page-item {
        list-style: none;
    }

    .page-link {
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        border: 1px solid var(--gray-200);
        color: var(--primary-color);
        text-decoration: none;
        transition: var(--transition-base);
    }

        .page-link:hover {
            background-color: var(--primary-light);
        }

    .page-item.active .page-link {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .page-item.disabled .page-link {
        color: var(--gray-300);
        pointer-events: none;
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .page-header {
            padding: 1.25rem;
        }

        .page-title {
            font-size: 1.5rem;
        }

        .header-actions {
            flex-direction: column;
            gap: 1rem;
        }

        .search-container {
            max-width: 100%;
        }

        .ticket-card-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .ticket-actions {
            width: 100%;
            justify-content: flex-end;
        }
    }

    @@media (max-width: 576px) {
        .ticket-details-row {
            flex-direction: column;
        }

        .ticket-details-col {
            width: 100%;
        }

        .ticket-footer-actions {
            flex-direction: column;
            gap: 0.5rem;
        }

            .ticket-footer-actions .btn {
                width: 100%;
            }
    }
</style>

<div class="container-fluid px-3 px-md-4 py-3">
    <!-- Header Section -->
    <div class="page-header">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
            <div class="d-flex align-items-center">
                <i class="bi bi-ticket-detailed page-icon"></i>
                <div>
                    <h1 class="page-title">
                        @(string.IsNullOrEmpty(TicketStatus) ? "All Tickets" : $"{TicketStatus} Tickets")
                    </h1>
                    <p class="text-black mb-0 d-none d-md-block">Manage and track all support tickets</p>
                </div>
            </div>

            <div class="d-flex header-actions align-items-center gap-3">
                <!-- Search Input -->
                <div class="search-container">
                    <i class="bi bi-search search-icon"></i>
                    <input type="text"
                           class="form-control search-input"
                           placeholder="Search tickets..."
                           @bind="searchTerm"
                           @oninput="HandleSearchInput" />
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <button class="clear-search"
                                type="button"
                                @onclick="ClearSearch">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    }
                </div>

                <!-- Export Button -->
                <button class="btn btn-primary d-flex align-items-center gap-2 action-btn"
                        @onclick="ExportToExcel">
                    <i class="bi bi-file-earmark-excel"></i>
                    <span class="d-none d-md-inline">Export</span>
                </button>
            </div>
        </div>
    </div>

    <!-- Content Section -->
    <div class="card border-0 shadow-sm rounded-3 overflow-hidden">
        <div class="card-body p-4">
            @if (tickets == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!FilteredTickets.Any())
            {
                <div class="text-center py-5">
                    <div class="mb-4">
                        <i class="bi bi-ticket-detailed text-muted" style="font-size: 3rem;"></i>
                    </div>
                    <h4 class="text-muted mb-3">
                        @(string.IsNullOrEmpty(searchTerm)
                                            ? "No Tickets Found"
                                            : "No matching tickets found")
                                                                      </h4>
                                                                      <p class="text-muted">
                        @(string.IsNullOrEmpty(searchTerm)
                                            ? "There are currently no tickets in this category"
                                            : "Try a different search term")
                </p>
            </div>
                        }
            else
            {
                <!-- Tickets List -->
                <div class="tickets-container">
                    @foreach (var ticket in CurrentPageTickets)
                    {
                        <div class="ticket-card card">
                            <div class="card-header d-flex flex-wrap justify-content-between align-items-center p-3 bg-light">
                                <div class="d-flex align-items-center gap-3">
                                    <span class="badge @GetStatusClass(ticket.Status)">@ticket.Status</span>
                                    <div>
                                        <h6 class="mb-0"><i class="bi bi-tag-fill me-1"></i>Ticket #@ticket.TID</h6>
                                        <small class="text-muted"><i class="bi bi-grid-1x2-fill me-1"></i>@ticket?.Category?.CategoryName • <i class="bi bi-calendar-event me-1"></i>@ticket.OpenDate.ToString("MMM dd, yyyy")</small>
                                    </div>
                                </div>
                                <div class="d-flex gap-2 ticket-actions">
                                    <button class="btn btn-sm btn-outline-primary"
                                            onclick="toggleCollapse(this)">
                                        <i class="bi bi-chevron-down me-1"></i>Details
                                    </button>
                                </div>
                            </div>

                            <div class="card-body p-3 collapse-body" style="display: none;">
                                <div class="row ticket-details-row">
                                    <div class="col-md-6 ticket-details-col">
                                        <div class="mb-3">
                                            <span class="text-muted"><i class="bi bi-exclamation-triangle-fill me-1"></i>Priority:</span>
                                            <span class="badge @GetPriorityClass(ticket.Priority) ms-2"><i class="bi bi-flag-fill me-1"></i>@ticket.Priority</span>
                                        </div>
                                        <div class="mb-3">
                                            <span class="text-muted"><i class="bi bi-person-check-fill me-1"></i>Assigned To:</span>
                                            @if (ticket.Agent != null)
                                            {
                                                <span class="badge btn-action-active ms-2"><i class="bi bi-person-fill me-1"></i>@ticket.Agent.Fname @ticket.Agent.Lname</span>
                                            }
                                            else
                                            {
                                                <span class="badge btn-action-inactive ms-2"><i class="bi bi-person-x-fill me-1"></i>Not Assigned</span>
                                            }
                                        </div>
                                        @if (ticket.Status == "Assigned")
                                        {
                                            <div class="mb-3">
                                                <span class="text-muted"><i class="bi bi-calendar-check-fill me-1"></i>Assign Date:</span>
                                                <span><i class="bi bi-clock-fill me-1"></i>@ticket.AssignDate.ToString()</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="col-md-6 ticket-details-col">
                                        <div class="mb-3">
                                            <span class="text-muted"><i class="bi bi-person-plus-fill me-1"></i>Created By:</span>
                                            <span><i class="bi bi-person-circle me-1"></i>@ticket.User.Fname @ticket.User.Lname</span>
                                        </div>
                                        <div class="mb-3">
                                            <span class="text-muted"><i class="bi bi-chat-square-text-fill me-1"></i>Subject:</span>
                                            <span><i class="bi bi-card-text me-1"></i>@ticket.Subject</span>
                                        </div>
                                        @if (ticket.Status == "Assigned")
                                        {
                                            <div class="mb-3">
                                                <span class="text-muted"><i class="bi bi-alarm-fill me-1"></i>Expected Time:</span>
                                                <span><i class="bi bi-stopwatch-fill me-1"></i>@ticket.Due_Minutes Minutes</span>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <div class="mt-3 p-3 bg-light rounded">
                                    <h6 class="text-muted"><i class="bi bi-journal-text me-1"></i>Issue Description:</h6>
                                    <p class="mb-0"><i class="bi bi-chat-left-quote-fill me-2"></i>@ticket.Issue</p>
                                </div>

                                @if (TicketStatus == "Closed")
                                {
                                    <div class="mt-3 p-3 bg-light rounded">
                                        <h6 class="text-muted"><i class="bi bi-check-circle-fill me-1"></i>Resolution:</h6>
                                        @if (ticket.IsSolved == true && !string.IsNullOrEmpty(ticket.Solution))
                                        {
                                            <p class="mb-0"><i class="bi bi-lightbulb-fill me-2"></i>@ticket.Solution</p>
                                        }
                                        else if (ticket.IsSolved == true)
                                        {
                                            <p class="mb-0 badge badge-priority-urgent"><i class="bi bi-exclamation-triangle-fill me-1"></i>No solution provided</p>
                                        }
                                        else
                                        {
                                            <p class="mb-0"><i class="bi bi-emoji-frown-fill me-2"></i>Ticket was not resolved</p>
                                        }
                                    </div>
                                }

                                <div class="card-footer p-3 d-flex justify-content-end gap-2 ticket-footer-actions">
                                    <a href="/tickets/ticketdetails/@ticket.TID" class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-info-circle-fill me-1"></i>View Details
                                    </a>
                                    <AuthorizeView Roles="Admin">
                                        <button type="button" class="btn btn-sm btn-primary" @onclick="() => HandleAssign(ticket.TID)">
                                            @if (ticket.Status == "Assigned")
                                            {
                                                <i class="bi bi-arrow-repeat me-1"></i>
                                                <span>Re-Assign</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-person-plus-fill me-1"></i>
                                                <span>Assign</span>
                                            }
                                        </button>
                                    </AuthorizeView>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <div class="pagination-container">
                        <ul class="pagination">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(1)" aria-label="First">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" aria-label="Previous">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>

                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                </li>
                            }

                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" aria-label="Next">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(totalPages)" aria-label="Last">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    // Pagination variables
    private int currentPage = 1;
    private const int pageSize = 10; // Number of tickets per page
    private int totalPages = 1;

    // Computed property for current page tickets
    private IEnumerable<Ticket> CurrentPageTickets =>
        FilteredTickets.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CalculateTotalPages();
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling((double)FilteredTickets.Count() / pageSize);
        if (currentPage > totalPages && totalPages > 0)
        {
            currentPage = totalPages;
        }
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        StateHasChanged();
    }

}
@code {
    private IEnumerable<Ticket>? tickets = new List<Ticket>();
    private IEnumerable<Ticket>? FilteredTickets = new List<Ticket>();
    private IEnumerable<AppUser>? agents = new List<AppUser>();
    private string searchTerm = string.Empty;
    private Timer? debounceTimer;
    private bool _disposed;

    [Parameter]
    public string TicketStatus { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(TimeSpan.FromSeconds(0.5));
        await LoadTickets();

        // Subscribe to SignalR updates
        NotificationService.OnTicketUpdated += HandleTicketUpdate;
        await NotificationService.InitializeAsync(HandleNotification);
    }

    private async Task HandleNotification(string message)
    {
        // Optional: Handle general notifications if needed
        // await JS.InvokeVoidAsync("console.log", $"Notification received: {message}");
    }
    private async Task HandleTicketUpdate(int ticketId, string action)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                StateHasChanged();
                await Task.Delay(1000);
                await LoadTickets();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error");
            }
        });
    }

    private bool ShouldShowTicket(Ticket ticket)
    {
        return string.IsNullOrEmpty(TicketStatus) ||
               ticket.Status.Equals(TicketStatus, StringComparison.OrdinalIgnoreCase);
    }

    private async Task LoadTickets()
    {
        try
        {
            if (TicketStatus == "Assigned")
            {
                tickets = await _ITicket.GetAllAssignedTickets();
            }
            else if (TicketStatus == "Escalated")
            {
                tickets = await _ITicket.GetAllEscalatedTickets();
            }
            else if (TicketStatus == "Closed")
            {
                tickets = await _ITicket.GetAllClosedTicketsAsync();
            }
            else
            {
                tickets = await _ITicket.GetAllOpendTicketsAsync();
            }
            FilteredTickets = tickets;
            agents = await _IAppUser.GetAllAgentsAsync();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading tickets: {ex.Message}");
        }
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid too many rapid updates
        debounceTimer?.Dispose();
        debounceTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterTickets();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void FilterTickets()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            FilteredTickets = tickets;
        }
        else
        {
            var term = searchTerm.ToLower();
            FilteredTickets = tickets?.Where(t =>
                t.TID.ToString().Contains(term) ||
                t.Subject.ToLower().Contains(term) ||
                t.Issue.ToLower().Contains(term) ||
                (t.Solution != null && t.Solution.ToLower().Contains(term)) ||
                t.User.Fname.ToLower().Contains(term) ||
                t.User.Lname.ToLower().Contains(term) ||
                (t.Agent != null && t.Agent.Fname.ToLower().Contains(term)) ||
                (t.Agent != null && t.Agent.Lname.ToLower().Contains(term)) ||
                t.Category.CategoryName.ToLower().Contains(term))
                .ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FilteredTickets = tickets;
    }

    private string GetStatusClass(string status) => status switch
    {
        "Open" => "badge-status-open",
        "Assigned" => "badge-status-Assigned",
        "Escalated" => "badge-status-Esclated",
        _ => "badge-status-closed"
    };

    private string GetPriorityClass(string priority) => priority switch
    {
        "Urgent" => "badge-priority-urgent",
        "High" => "badge-priority-high",
        "Medium" => "badge-priority-medium",
        _ => "badge-priority-low"
    };

    private int AssignId { get; set; }
    private async Task HandleAssign(int id)
    {
        AssignId = id;
        await JS.InvokeVoidAsync("ShowAssignTicketFormModal");
    }

    private async Task ConfirmAssign_Click(Ticket ticket)
    {
        await JS.InvokeVoidAsync("HideAssignTicketFormModal");

        if (AssignId != 0)
        {
            var temp = await _ITicket.GetTicketByIdAsync(AssignId);
            var result = await _ITicket.AssignTicketAsync(ticket, AssignId);
            if (result)
            {
                JS?.ToastrSuccess("Ticket Assigned Successfully");
                // Notify all clients about the assignment
                await NotificationService.SendTicketUpdateAsync(AssignId, "Assigned");
            }
            else
            {
                JS?.ToastrError("Error Encountered while Assigning");
            }
            await LoadTickets();
        }
        AssignId = 0;
    }

    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add(TicketStatus + " Tickets");

        // Add headers
        worksheet.Cell(1, 1).Value = "TICKET ID";
        worksheet.Cell(1, 2).Value = "Subject";
        worksheet.Cell(1, 3).Value = "Priotiy";
        worksheet.Cell(1, 4).Value = "Category";
        worksheet.Cell(1, 5).Value = "Issue";
        worksheet.Cell(1, 6).Value = "Open Date";
        worksheet.Cell(1, 7).Value = "Status";
        worksheet.Cell(1, 8).Value = "User Full Name";
        worksheet.Cell(1, 9).Value = "User Email";
        worksheet.Cell(1, 10).Value = "Location";
        if (TicketStatus == "Assigned" || TicketStatus == "Closed")
        {
            worksheet.Cell(1, 11).Value = "Assign Date";
            worksheet.Cell(1, 12).Value = "Due Minutes";
            worksheet.Cell(1, 13).Value = "Desk Agent";
            if (TicketStatus == "Closed")
            {
                worksheet.Cell(1, 14).Value = "Close Date";
                worksheet.Cell(1, 15).Value = "Is Solved";
                worksheet.Cell(1, 16).Value = "Solution";
                worksheet.Cell(1, 17).Value = "Comment";
                worksheet.Cell(1, 18).Value = "User Rate";
                worksheet.Cell(1, 19).Value = "Ticket Rate";
            }
        }

        // Add data
        int row = 2;
        foreach (var ticket in FilteredTickets)
        {
            worksheet.Cell(row, 1).Value = ticket.TID;
            worksheet.Cell(row, 2).Value = ticket.Subject;
            worksheet.Cell(row, 3).Value = ticket.Priority;
            worksheet.Cell(row, 4).Value = ticket.Category.CategoryName ?? "No Cateogry";
            worksheet.Cell(row, 5).Value = ticket.Issue;
            worksheet.Cell(row, 6).Value = ticket.OpenDate;
            worksheet.Cell(row, 7).Value = ticket.Status;
            worksheet.Cell(row, 8).Value = ticket.User.Fname + " " + ticket.User.Lname;
            worksheet.Cell(row, 9).Value = ticket.User.Email;
            worksheet.Cell(row, 10).Value = ticket.Location.LocationName;
            if (TicketStatus == "Assigned" || TicketStatus == "Closed")
            {
                worksheet.Cell(row, 11).Value = ticket.AssignDate == null ? "No Assign Date" : ticket.CloseDate;
                worksheet.Cell(row, 12).Value = ticket.Due_Minutes == null ? "No Expected Time" : ticket.Due_Minutes;
                worksheet.Cell(row, 13).Value = ticket.AgentID == null ? "No Agent Yet" : ticket.Agent.Fname + " " + ticket.Agent.Lname;
                if (TicketStatus == "Closed")
                {
                    worksheet.Cell(row, 14).Value = ticket.CloseDate;
                    worksheet.Cell(row, 15).Value = ticket.IsSolved == true ? "Solved" : "UnSolved";
                    worksheet.Cell(row, 16).Value = ticket.IsSolved == true ? (ticket.Solution != null ? ticket.Solution : "No Solution Ticket Unsolved") : "No Solution Ticket Unsolved";
                    worksheet.Cell(row, 17).Value = ticket.Comments == null ? "No Comment" : ticket.Comments;
                    worksheet.Cell(row, 18).Value = ticket.UserRate == null ? "No User Rate Yet" : ticket.UserRate + " Star From 5 Stars";
                    worksheet.Cell(row, 19).Value = ticket.TicketRate;
                }
            }
            row++;
        }

        // Formatting
        var headerRow = worksheet.Range(1, 1, 1, worksheet.LastColumnUsed().ColumnNumber());
        headerRow.SetAutoFilter(true);
        headerRow.Style.Font.Bold = true;
        headerRow.Style.Font.FontColor = XLColor.Black;
        headerRow.Style.Fill.BackgroundColor = XLColor.OrangeColorWheel;
        headerRow.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        headerRow.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        worksheet.RangeUsed().Style.Border.OutsideBorder = XLBorderStyleValues.Thick;
        worksheet.RangeUsed().Style.Border.InsideBorder = XLBorderStyleValues.Thick;

        worksheet.Style.Font.FontName = "Arial";
        worksheet.Style.Font.FontSize = 10;
        headerRow.Style.Font.FontSize = 10;

        worksheet.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
        worksheet.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        worksheet.Columns().AdjustToContents();
        worksheet.Rows().AdjustToContents();

        // Save and download
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        var fileBytes = stream.ToArray();
        var fileName = $"{TicketStatus} Tickets{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            debounceTimer?.Dispose();
            NotificationService.OnTicketUpdated -= HandleTicketUpdate;
            _disposed = true;
        }
    }
}