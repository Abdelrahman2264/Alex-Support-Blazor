@page "/Tickets"
@page "/tickets/{TicketStatus}"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ITicketRepository _ITicket
@inject IAppUserRepoistory _IAppUser
@rendermode InteractiveServer
@inject IJSRuntime JS
@attribute [Authorize]

<AssignFormModal Title="@(!string.IsNullOrWhiteSpace(TicketStatus) ? "Re-Assign Ticket" : "Assign Ticket")"
                 OnModalConfirmation="ConfirmAssign_Click"
                 Agents="agents" />
<div class="tickets-container">
    @if (tickets == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!tickets.Any())
    {
        <div class="alert alert-info">
            No tickets found
        </div>
    }
    else
    {
        @foreach (var ticket in tickets)
        {
            <div class="ticket-card card mb-3 w-100">
                <div class="card-header d-flex justify-content-between align-items-center p-3">
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge @GetStatusClass(ticket.Status)">@ticket.Status</span>
                        <div>
                            <h6 class="mb-0">Ticket #@ticket.TID</h6>
                            <small class="text-muted">@ticket?.category?.CategoryName • @ticket.OpenDate.ToString("MMM dd, yyyy")</small>
                        </div>
                    </div>
                    <div class="d-flex gap-2">

                        <button class="btn btn-sm btn-outline-secondary"
                                onclick="toggleCollapse(this)">
                            ▼ Details
                        </button>
                    </div>
                </div>

                <div class="card-body p-3 collapse-body" style="display: none;">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-2">
                                <span class="text-muted">Priority:</span>
                                <span class="badge @GetPriorityClass(ticket.Priority) ms-2">@ticket.Priority</span>
                            </div>
                            <div class="mb-2">
                                <span class="text-muted">Assigned To:</span>
                                @if (ticket.Agent != null)
                                {
                                    <span class="badge btn-action-active ms-2">@ticket.Agent.Fname @ticket.Agent.Lname</span>
                                }
                                else
                                {
                                    <span class="badge btn-action-inactive ms-2">Not Assigned Yet !</span>
                                }

                            </div>
                            @if (ticket.Status == "Assigned")
                            {
                                <div class="mb-2">
                                    <span class="text-muted">Assign Date:</span>
                                    <span>@ticket.Assign_Date.ToString()</span>
                                </div>
                            }
                        </div>
                        <div class="col-md-6">
                            <div class="mb-2">
                                <span class="text-muted">Created By:</span>
                                <span>@ticket.User.Fname @ticket.User.Lname</span>
                            </div>
                            <div class="mb-2">
                                <span class="text-muted">Subject:</span>
                                <span>@ticket.Subject</span>
                            </div>
                            @if (ticket.Status == "Assigned")
                            {
                                <div class="mb-2">
                                    <span class="text-muted">Expected Time:</span>
                                    <span>@ticket.Due_Minutes Minutes</span>
                                </div>
                            }


                        </div>
                    </div>

                    <div class="mt-3 p-2 bg-light rounded">
                        <h6 class="text-muted">Issue Description:</h6>
                        <p class="mb-0">@ticket.Issue</p>
                    </div>
                    @if (TicketStatus == "Closed")
                    {
                        @if (ticket.IsSolved == true)
                        {
                            <div class="mt-3 p-2 bg-light rounded">
                                <h6 class="text-muted">Issue Solution:</h6>
                                <p class="mb-0">@ticket.Solution</p>
                            </div>
                        }
                        else
                        {
                            <div class="mt-3 p-2 bg-light rounded">
                                <h6 class="text-muted">Issue Solution:</h6>
                                <p class="mb-0">ticked was unsolved by our team 💤💤</p>
                            </div>
                        }

                    }

                   

                        <div class="card-footer p-3 d-flex justify-content-end gap-2">
                            <a href="tickets/ticketdetails/@ticket.TID" class="btn btn-sm btn-outline-primary">Details</a>
                             <AuthorizeView Roles="Admin">
                            <button type="button" class="btn btn-sm btn-primary" @onclick="()=>HandleAssign(ticket.TID)">
                                @if (ticket.Status == "Assigned")
                                {
                                    <span>Re-Assign</span>
                                }
                                else
                                {
                                    <span>Assign</span>
                                }



                            </button>
                        </AuthorizeView>

                        </div>

                </div>
            </div>
        }
    }
</div>

@code {
    private IEnumerable<Ticket>? tickets = new List<Ticket>();
    private IEnumerable<AppUser>? agents = new List<AppUser>();
    [Parameter]
    public string TicketStatus { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTickets();
    }
    private async Task LoadTickets()
    {
        if (TicketStatus == "Assigned")
        {
            tickets = await _ITicket.GetAllOpendTicketsAsync();
            tickets = tickets.Where(u => u.Status == "Assigned");
        }
        else if (TicketStatus == "Closed")
        {
            tickets = await _ITicket.GetAllClosedTicketsAsync();

        }
        else
        {
            tickets = await _ITicket.GetAllOpendTicketsAsync();

        }
        agents = await _IAppUser.GetAllAgentsAsync();
    }
    private string GetStatusClass(string status) => status switch
    {
        "Open" => "badge-status-open",
        "Assigned" => "badge-status-Assigned",
        "Esclated" => "badge-status-Esclated",
        _ => "bg-secondary"
    };

    private string GetPriorityClass(string priority) => priority switch
    {
        "Urgent" => "badge-priority-high",
        "High" => "badge-priority-medium",
        "Medium" => "badge-priority-low",
        _ => "bg-secondary"
    };
    private int AssignId { get; set; }
    private async Task HandleAssign(int id)
    {
        AssignId = id;
        await JS.InvokeVoidAsync("ShowAssignTicketFormModal"); // Show modal
    }

    private async Task ConfirmAssign_Click(Ticket ticket)
    {
        await JS.InvokeVoidAsync("HideAssignTicketFormModal"); // Hide modal

        if (AssignId != 0)
        {
            var temp = await _ITicket.GetTicketByIdAsync(AssignId);
            var result = await _ITicket.AssignTicketAsync(ticket, AssignId);
            if (result)
            {
                JS?.ToastrSuccess("Ticket Assigned Successfully");

            }
            else
                JS?.ToastrError("Error Encountered while Assigning");

            await LoadTickets();
        }
        AssignId = 0;
    }
}
