@page "/DailyTasks"
@using System.ComponentModel.DataAnnotations
@inject IDailyTaskRepository _ITask
@inject IJSRuntime JS
@rendermode InteractiveServer
@inject ICategoryRepository _ICategory
@inject ILocationRepository _ILocation
@inject IAppUserRepoistory _IAppUser
@inject ITicketRepository _ITicket

<CreateNewdailyTaskComponent Title="Create New Daily Task"
                             ticket="newtask"
                             Category="categories"
                             OnModalConfirmation="ConfirmCreateTask_Click" />

<BsModal Title="Are you sure tou want to inactive this daily task ?"
         ButtonBootstrapStyle="btn btn-primary"
         ButtonText="Confirm delete"
         OnModalConfirmation="DeleteTicket" />

<AssignFormModal Title="Assign Daily Task"
                 ticket="ticket"
                 Locations="locations"
                 Agents="agents"
                 type="DailyTask"
                 OnModalConfirmation="ConfirmAssign_Click" />

<h3 class="page-title">Daily Tasks</h3>

<div class="tickets-container">
    <!-- Filter and Search Bar -->
    <div class="tickets-controls">
        <div class="search-box">
            <i class="bi bi-search"></i>
            <input type="text" placeholder="Search tickets..." @bind="searchQuery" @bind:event="oninput" />
        </div>
        <select class="form-select" @bind="priorityFilter">
            <option value="">All Priorities</option>
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
            <option value="Urgent">Urgent</option>
        </select>
        <div class="filter-controls">



            <button class="btn btn-primary" @onclick="AddNewTicket">
                <i class="bi bi-plus-lg"></i> New Task
            </button>
        </div>
    </div>

    <!-- Tickets Grid/List -->
    <div class="tickets-grid">
        @if (tasks.Any())
        {
            @foreach (var task in filteredtasks)
            {
                <div class="ticket-card @task.Priority.ToLower()">
                    <div class="ticket-header">
                        <div class="header-left">
                            <span class="ticket-id">#@task.DTID</span>
                            <span class="ticket-status @task.Priority.ToLower()">@task.Priority.ToLower()</span>
                        </div>
                        <div class="header-actions">
                            <button class="btn-action" @onclick="() => EditTicket(task.DTID)" title="Edit">
                                <i class="bi bi-pencil"></i>
                                <span class="action-text">Edit</span>
                            </button>
                            <button class="btn-action" @onclick="() => AssignTicket(task.DTID)" title="Assign">
                                <i class="bi bi-person-plus"></i>
                                <span class="action-text">Assign</span>
                            </button>
                            <button class="btn-action" @onclick="() => RemoveTicket(task.DTID)" title="Delete">
                                <i class="bi bi-trash"></i>
                                <span class="action-text">Delete</span>
                            </button>
                        </div>
                    </div>
                    <h4 class="ticket-title">@task.Subject</h4>
                    <p class="ticket-description">@task.Issue</p>
                    <div class="ticket-footer">
                        <span class="ticket-date">
                            <i class="bi bi-calendar"></i> @task.Due_Minutes
                        </span>
                        <span class="ticket-assignee">
                            <i class="bi bi-person"></i> @task.category?.CategoryName
                        </span>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="no-tickets">
                <i class="bi bi-inbox"></i>
                <p>No tickets found matching your criteria</p>
            </div>
        }
    </div>


</div>



<style>
   
</style>

@code {
    private List<Ticket> tickets = new();
    private Ticket? selectedTicket;
    private Ticket? ticket = new Ticket();
    private IEnumerable<Location>? locations = new List<Location>();
    private int updatedid { get; set; } = 0;

    private bool showModal = false;
    private string searchQuery = "";
    private string statusFilter = "";
    private string priorityFilter = "";
    private IEnumerable<DailyTasks> tasks = new List<DailyTasks>();
    private int AssignId { get; set; } = 0;
    private int deletedid { get; set; } = 0;

    private DailyTasks newtask { get; set; } = new DailyTasks();
    private IEnumerable<Category>? categories = new List<Category>();
    private IEnumerable<AppUser>? agents = new List<AppUser>();

    private IEnumerable<DailyTasks> filteredtasks => tasks
    .Where(t => string.IsNullOrEmpty(searchQuery) ||
                t.Subject.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                t.Issue.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                t.category.CategoryName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                t.Priority.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
    )

    .Where(t => string.IsNullOrEmpty(priorityFilter) || t.Priority == priorityFilter)
    .OrderByDescending(t => t.DTID)
    .ToList();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }

    private async Task EditTicket(int dtid)
    {
        newtask = await _ITask.GetDailyTaskAsync(dtid);

        await JS.InvokeVoidAsync("ShowAddTaskFormModal");
        deletedid = dtid;
    }

    private async Task AssignTicket(int dtid)
    {
        var temp = await _ITask.GetDailyTaskAsync(dtid);
        if (temp != null)
        {
            ticket.Subject = temp.Subject;
            ticket.Issue = temp.Issue;
            ticket.Due_Minutes = temp.Due_Minutes;
            ticket.CategoryID = temp.CategoryID;
            ticket.Priority = temp.Priority;
            ticket.UID = 11;
            AssignId = dtid;
            await JS.InvokeVoidAsync("ShowAssignTicketFormModal");
        }

    }
    private async Task RemoveTicket(int dtid)
    {
        await JS.InvokeVoidAsync("ShowConfirmationModal");
        deletedid = dtid;

    }



    private async Task DeleteTicket()
    {
        await JS.InvokeVoidAsync("HideConfirmationModal");

        if (deletedid != 0)
        {
            bool flag = await _ITask.InActiveDailyTaskAsync(deletedid);
            if (flag)
                await JS.ToastrSuccess("Task Inactivated Successfully");
            else
                await JS.ToastrError($"Failed to Inactive Task Please try again !");

            await LoadData();
        }
    }

    private async Task AddNewTicket()
    {
        newtask = new DailyTasks();

        await JS.InvokeVoidAsync("ShowAddTaskFormModal");
    }

    private async Task ConfirmCreateTask_Click(DailyTasks ticket)
    {
        await JS.InvokeVoidAsync("HideAddTaskFormModal"); // Hide modal

        if (updatedid != 0)
        {
            var temp = await _ITask.CreateDailyTaskAsync(ticket);
            if (temp.IsActive == true)
            {
                ticket = new DailyTasks();
                JS?.ToastrSuccess("Task Create Successfully");
            }
            else
            {
                JS?.ToastrError("Error Encountered while Assigning");

            }
        }
        else
        {
            var temp = await _ITask.UpdateDailyTaskAsync(ticket);
            if (temp)
            {
                ticket = new DailyTasks();
                JS?.ToastrSuccess("Task Updated Successfully");
            }
            else
            {
                JS?.ToastrError("Error Encountered while Assigning");

            }

        }
        await LoadData();

    }
    private async Task ConfirmAssign_Click(Ticket ticket)
    {

        await JS.InvokeVoidAsync("HideAssignTicketFormModal"); // Hide modal

        if (AssignId != 0)
        {
            var tempticket = await _ITicket.CreateTicketAsync(ticket);
            var temp = await _ITicket.GetTicketByIdAsync(tempticket.TID);
            var result = await _ITicket.AssignTicketAsync(tempticket, temp.TID);
            if (result)
            {
                JS?.ToastrSuccess("Ticket Assigned Successfully");

            }
            else
                JS?.ToastrError("Error Encountered while Assigning");

            await LoadData();
        }
        AssignId = 0;
    }
    private async Task LoadData()
    {
        tasks = await _ITask.GetAllDailyTasksAsync();
        categories = await _ICategory.AllCategoriesAsync();
        locations = await _ILocation.AllLocationsAsync();
        agents = await _IAppUser.GetAllAgentsAsync();

    }
}
