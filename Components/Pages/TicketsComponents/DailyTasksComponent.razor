@page "/DailyTasks"
@inject IDailyTaskRepository _ITask
@inject IJSRuntime JS
@inject ICategoryRepository _ICategory
@inject ILocationRepository _ILocation
@inject IAppUserRepoistory _IAppUser
@inject ITicketRepository _ITicket
@rendermode InteractiveServer
<PageTitle>Daily Tasks</PageTitle>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

@attribute [Authorize(Roles = "Admin,Agent")]

<CreateNewdailyTaskComponent Title="Create New Daily Task"
                             ticket="newtask"
                             Category="categories"
                             Agents="agents"
                             Locations="locations"
                             OnModalConfirmation="ConfirmCreateTask_Click" />

<BsModal Title="Are you sure you want to inactive this daily task?"
         ButtonBootstrapStyle="btn-danger"
         ButtonText="Confirm"
         OnModalConfirmation="DeleteTicket" />


<style>
    :root {
        --primary-color: #4361ee;
        --primary-light: #eef2ff;
        --success-color: #10b981;
        --success-light: #ecfdf5;
        --danger-color: #ef4444;
        --danger-light: #fef2f2;
        --warning-color: #f59e0b;
        --warning-light: #fffbeb;
        --info-color: #3b82f6;
        --info-light: #eff6ff;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-700: #374151;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --transition-base: all 0.2s ease-in-out;
    }

    /* Header Styles */
    .page-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, white 100%);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow-sm);
        margin-bottom: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: white;
        margin: 0;
    }

    .page-icon {
        font-size: 2rem;
        color: white;
        margin-right: 1rem;
    }

    /* Search and Actions */
    .search-container {
        position: relative;
        width: 100%;
        max-width: 400px;
    }

    .search-input {
        border-radius: 50px;
        padding: 0.625rem 1.5rem 0.625rem 3rem;
        border: 1px solid var(--gray-200);
        font-size: 0.9375rem;
        transition: var(--transition-base);
        width: 100%;
    }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

    .search-icon {
        position: absolute;
        left: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--gray-300);
    }

    .clear-search {
        position: absolute;
        right: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--gray-400);
        cursor: pointer;
    }

    /* Task Card Styles */
    .task-card {
        border-radius: 12px;
        overflow: hidden;
        border: none;
        box-shadow: var(--shadow-sm);
        transition: var(--transition-base);
        height: 100%;
        display: flex;
        flex-direction: column;
    }

        .task-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

    .task-card-header {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--gray-200);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .task-card-body {
        padding: 1.5rem;
        flex-grow: 1;
    }

    .task-card-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid var(--gray-200);
        background-color: var(--gray-100);
    }

    /* Priority Badges */
    .badge-priority {
        font-size: 0.75rem;
        padding: 0.4rem 0.75rem;
        border-radius: 50px;
        font-weight: 500;
    }

    .badge-priority-low {
        background-color: var(--success-light);
        color: var(--success-color);
    }

    .badge-priority-medium {
        background-color: var(--warning-light);
        color: var(--warning-color);
    }

    .badge-priority-high {
        background-color: #f97316;
        color: white;
    }

    .badge-priority-urgent {
        background-color: var(--danger-light);
        color: var(--danger-color);
    }

    /* Info Items */
    .info-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .info-icon {
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--primary-light);
        border-radius: 8px;
        margin-right: 0.75rem;
        color: var(--primary-color);
    }

    /* Dropdown Menu */
    .dropdown-toggle::after {
        display: none;
    }

    .dropdown-menu {
        border: none;
        box-shadow: var(--shadow-lg);
        border-radius: 8px;
        padding: 0.5rem 0;
    }

    .dropdown-item {
        padding: 0.5rem 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition-base);
    }

        .dropdown-item:hover {
            background-color: var(--gray-100);
        }

    .dropdown-item-danger {
        color: var(--danger-color);
    }

        .dropdown-item-danger:hover {
            background-color: var(--danger-light);
        }

    /* Empty State */
    .empty-state {
        padding: 4rem 2rem;
        text-align: center;
        background: white;
        border-radius: 12px;
        box-shadow: var(--shadow-sm);
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 400px;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: var(--gray-200);
        margin-bottom: 1.5rem;
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 2rem;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
    }

    .page-item {
        list-style: none;
    }

    .page-link {
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        border: 1px solid var(--gray-200);
        color: var(--primary-color);
        text-decoration: none;
        transition: var(--transition-base);
    }

        .page-link:hover {
            background-color: var(--primary-light);
        }

    .page-item.active .page-link {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .page-item.disabled .page-link {
        color: var(--gray-300);
        pointer-events: none;
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .page-header

    {
        padding: 1.25rem;
    }

    .page-title {
        font-size: 1.5rem;
    }

    .header-actions {
        flex-direction: column;
        gap: 1rem;
    }

    .search-container {
        max-width: 100%;
    }

    .task-card-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    }

    @@media (max-width: 576px) {
        .task-card-body

    {
        padding: 1rem;
    }

    .info-item {
        flex-direction: column;
        align-items: flex-start;
    }

    .info-icon {
        margin-bottom: 0.5rem;
        margin-right: 0;
    }

    }

    /* Animation for cards */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .task-card {
        animation: fadeIn 0.3s ease-out forwards;
        opacity: 0;
    }

        .task-card:nth-child(1) {
            animation-delay: 0.1s;
        }

        .task-card:nth-child(2) {
            animation-delay: 0.2s;
        }

        .task-card:nth-child(3) {
            animation-delay: 0.3s;
        }

        .task-card:nth-child(4) {
            animation-delay: 0.4s;
        }

        .task-card:nth-child(5) {
            animation-delay: 0.5s;
        }

        .task-card:nth-child(6) {
            animation-delay: 0.6s;
        }
</style>

<div class="container-fluid px-3 px-md-4 py-3">
    <!-- Header Section -->
    <div class="page-header">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
            <div class="d-flex align-items-center">
                <i class="bi bi-list-task page-icon"></i>
                <div>
                    <h1 class="page-title">Periodical Tasks</h1>
                    <p class="text-muted mb-0 d-none d-md-block">Manage and track recurring tasks</p>
                </div>
            </div>

            <div class="d-flex header-actions align-items-center gap-3">
                <!-- Search Input -->
                <div class="search-container">
                    <i class="bi bi-search search-icon"></i>
                    <input type="text"
                           class="form-control search-input"
                           placeholder="Search tasks..."
                           @bind="searchQuery"
                           @oninput="HandleSearchInput" />
                    @if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <button class="clear-search"
                                type="button"
                                @onclick="ClearSearch">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    }
                </div>

                <!-- Priority Filter -->
                <select class="form-select" @bind="priorityFilter" style="max-width: 150px;">
                    <option value="">All</option>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                    <option value="Urgent">Urgent</option>
                </select>

                <!-- Export Button -->
                <button class="btn btn-primary d-flex align-items-center gap-2"
                        @onclick="ExportToExcel">
                    <i class="bi bi-file-earmark-excel"></i>
                    <span class="d-none d-md-inline">Export</span>
                </button>

                <!-- Add New Button -->
                <AuthorizeView Roles="Admin">
                    <button class="btn btn-success d-flex align-items-center gap-2"
                            @onclick="AddNewTicket">
                        <i class="bi bi-plus-circle"></i>
                        <span class="d-none d-md-inline">New Task</span>
                    </button>
                </AuthorizeView>
            </div>
        </div>
    </div>

    <!-- Content Section -->
    <div class="card border-0 shadow-sm rounded-3 overflow-hidden">
        <div class="card-body p-4">
            @if (filteredtasks == null)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!filteredtasks.Any())
            {
                <div class="empty-state">
                    <i class="bi bi-list-task empty-state-icon"></i>
                    <h4 class="text-muted mb-3">
                        @(string.IsNullOrEmpty(searchQuery) ? "No Periodical Tasks Found" : "No matching tasks found")
                    </h4>
                    <p class="text-muted mb-4">
                        @(string.IsNullOrEmpty(searchQuery)
                                            ? "Create your first periodical task to get started"
                                            : "Try adjusting your search criteria")
                </p>
                <AuthorizeView Roles="Admin">
                    <button class="btn btn-primary" @onclick="AddNewTicket">
                        <i class="bi bi-plus-circle me-2"></i>Create Task
                    </button>
                </AuthorizeView>
            </div>
                        }
            else
            {
                <!-- Tasks Grid -->
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var task in CurrentPageTasks)
                    {
                        <div class="col">
                            <div class="task-card">
                                <div class="task-card-header">
                                    <div class="d-flex align-items-center gap-2">
                                        <span class="badge badge-priority @GetPriorityClass(task.Priority)">@task.Priority</span>
                                        <small class="text-muted">#@task.DTID</small>
                                    </div>
                                    <div class="dropdown">
                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle"
                                                type="button"
                                                data-bs-toggle="dropdown"
                                                aria-expanded="false">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <AuthorizeView Roles="Admin">
                                                <Authorized>
                                                    <li>
                                                        <button class="dropdown-item" @onclick="() => EditTicket(task.DTID)">
                                                            <i class="bi bi-pencil me-2"></i>Edit
                                                        </button>
                                                    </li>
                                                    <li>
                                                        <button class="dropdown-item dropdown-item-danger" @onclick="() => RemoveTicket(task.DTID)">
                                                            <i class="bi bi-trash me-2"></i>Delete
                                                        </button>
                                                    </li>
                                                </Authorized>
                                                <NotAuthorized>
                                                    <li>
                                                        <button class="dropdown-item disabled" disabled>
                                                            <i class="bi bi-pencil me-2"></i>Edit
                                                        </button>
                                                    </li>
                                                    <li>
                                                        <button class="dropdown-item disabled dropdown-item-danger" disabled>
                                                            <i class="bi bi-trash me-2"></i>Delete
                                                        </button>
                                                    </li>
                                                </NotAuthorized>
                                            </AuthorizeView>
                                        </ul>
                                    </div>
                                </div>
                                <div class="task-card-body">
                                    <h5 class="card-title mb-3">@task.Subject</h5>
                                    <p class="card-text text-muted mb-4">@task.Issue</p>

                                    <div class="task-details">
                                        <div class="info-item">
                                            <div class="info-icon">
                                                <i class="bi bi-tag"></i>
                                            </div>
                                            <small>@task.Category?.CategoryName</small>
                                        </div>
                                        <div class="info-item">
                                            <div class="info-icon">
                                                <i class="bi bi-clock"></i>
                                            </div>
                                            <small>Duration: @task.Due_Minutes minutes</small>
                                        </div>
                                        <div class="info-item">
                                            <div class="info-icon">
                                                <i class="bi bi-arrow-repeat"></i>
                                            </div>
                                            <small>Recurrence: @task.RecurrenceDays days</small>
                                        </div>
                                        <div class="info-item">
                                            <div class="info-icon">
                                                <i class="bi bi-person"></i>
                                            </div>
                                            <small>Agent: @task.Agent?.LoginName</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="task-card-footer d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        <i class="bi bi-calendar me-1"></i> Last Assigned:
                                        @task.LastUpdatedDate.ToString("MMM dd, yyyy")
                                    </small>
                                   
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <div class="pagination-container mt-4">
                        <ul class="pagination">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(1)" aria-label="First">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" aria-label="Previous">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>

                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                </li>
                            }

                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" aria-label="Next">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(totalPages)" aria-label="Last">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    // Pagination variables
    private int currentPage = 1;
    private const int pageSize = 20; // Number of tasks per page
    private int totalPages = 1;

    // Computed property for current page tasks
    private IEnumerable<DailyTasks> CurrentPageTasks =>
        filteredtasks.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CalculateTotalPages();
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling((double)filteredtasks.Count() / pageSize);
        if (currentPage > totalPages && totalPages > 0)
        {
            currentPage = totalPages;
        }
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        StateHasChanged();
    }

}
@code {
    private List<Ticket> tickets = new();
    private Ticket? selectedTicket;
    private Ticket? ticket = new Ticket();
    private IEnumerable<Location>? locations = new List<Location>();
    private int updatedid { get; set; } = 0;
    private bool showModal = false;
    private string searchQuery = "";
    private string statusFilter = "";
    private string priorityFilter = "";
    private IEnumerable<DailyTasks> tasks = new List<DailyTasks>();
    private int AssignId { get; set; } = 0;
    private int deletedid { get; set; } = 0;
    private DailyTasks newtask { get; set; } = new DailyTasks();
    private IEnumerable<Category>? categories = new List<Category>();
    private IEnumerable<AppUser>? agents = new List<AppUser>();
    private Timer? debounceTimer;

    private IEnumerable<DailyTasks> filteredtasks => tasks
        .Where(t => string.IsNullOrEmpty(searchQuery) ||
                    t.Subject.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    t.Issue.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    t.Category.CategoryName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    t.RecurrenceDays.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    t.CreatedDate.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    t.LastUpdatedDate.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    t.Priority.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
        )
        .Where(t => string.IsNullOrEmpty(priorityFilter) || t.Priority == priorityFilter)
        .OrderByDescending(t => t.DTID)
        .ToList();

    private string GetPriorityClass(string priority) => priority switch
    {
        "Low" => "badge-priority-low",
        "Medium" => "badge-priority-medium",
        "High" => "badge-priority-high",
        "Urgent" => "badge-priority-urgent",
        _ => "bg-secondary"
    };

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(TimeSpan.FromSeconds(0.1));

        await LoadData();
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid too many rapid updates
        debounceTimer?.Dispose();
        debounceTimer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 300, Timeout.Infinite);
    }

    private void ClearSearch()
    {
        searchQuery = "";
        priorityFilter = "";
    }

    private async Task EditTicket(int dtid)
    {
        newtask = await _ITask.GetDailyTaskAsync(dtid);
        updatedid = dtid;
        await JS.InvokeVoidAsync("ShowAddTaskFormModal");
    }



    private async Task RemoveTicket(int dtid)
    {
        await JS.InvokeVoidAsync("ShowConfirmationModal");
        deletedid = dtid;
    }

    private async Task DeleteTicket()
    {
        await JS.InvokeVoidAsync("HideConfirmationModal");

        if (deletedid != 0)
        {
            bool flag = await _ITask.InActiveDailyTaskAsync(deletedid);
            if (flag)
                await JS.ToastrSuccess("Task Inactivated Successfully");
            else
                await JS.ToastrError("Failed to Inactive Task. Please try again!");

            await LoadData();
        }
    }

    private async Task AddNewTicket()
    {
        newtask = new DailyTasks();
        updatedid = 0;
        await JS.InvokeVoidAsync("ShowAddTaskFormModal");
    }

    private async Task ConfirmCreateTask_Click(DailyTasks ticket)
    {
        await JS.InvokeVoidAsync("HideAddTaskFormModal");

        if (updatedid == 0)
        {
            var temp = await _ITask.CreateDailyTaskAsync(ticket);
            if (temp.IsActive == true)
            {
                newtask = new DailyTasks();
                JS?.ToastrSuccess("Task Created Successfully");
            }
            else
            {
                JS?.ToastrError("Error Encountered while Creating Task");
            }
        }
        else
        {
            var temp = await _ITask.UpdateDailyTaskAsync(ticket);
            if (temp)
            {
                newtask = new DailyTasks();
                JS?.ToastrSuccess("Task Updated Successfully");
            }
            else
            {
                JS?.ToastrError("Error Encountered while Updating Task");
            }
        }
        await LoadData();
    }


    private async Task LoadData()
    {
        tasks = await _ITask.GetAllDailyTasksAsync();
        categories = await _ICategory.AllCategoriesAsync();
        locations = await _ILocation.AllLocationsAsync();
        agents = await _IAppUser.GetAllAgentsAsync();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}


@code {
    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Daily Tasks");

        // Add headers
        worksheet.Cell(1, 1).Value = "TICKET ID";
        worksheet.Cell(1, 2).Value = "Subject";
        worksheet.Cell(1, 3).Value = "Priotiy";
        worksheet.Cell(1, 4).Value = "Category";
        worksheet.Cell(1, 5).Value = "Issue";
        worksheet.Cell(1, 6).Value = "Due Minutes";



        // Add data
        int row = 2;
        foreach (var task in filteredtasks)
        {
            worksheet.Cell(row, 1).Value = task.DTID;
            worksheet.Cell(row, 2).Value = task.Subject;
            worksheet.Cell(row, 3).Value = task.Priority;
            worksheet.Cell(row, 4).Value = task?.Category?.CategoryName ?? "No Cateogry";
            worksheet.Cell(row, 5).Value = task.Issue;
            worksheet.Cell(row, 6).Value = task.Due_Minutes;
            row++;
        }

        // Create a new workbook and worksheet

        // Set the header row style
        var headerRow = worksheet.Range(1, 1, 1, worksheet.LastColumnUsed().ColumnNumber());
        headerRow.SetAutoFilter(true);
        headerRow.Style.Font.Bold = true;
        headerRow.Style.Font.FontColor = XLColor.Black;
        headerRow.Style.Fill.BackgroundColor = XLColor.OrangeColorWheel;
        headerRow.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        headerRow.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Apply borders to the entire worksheet

        worksheet.RangeUsed().Style.Border.OutsideBorder = XLBorderStyleValues.Thick;
        worksheet.RangeUsed().Style.Border.InsideBorder = XLBorderStyleValues.Thick;

        // Set the font and alignment for all cells
        worksheet.Style.Font.FontName = "Arial";
        worksheet.Style.Font.FontSize = 10;
        headerRow.Style.Font.FontSize = 10;

        worksheet.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
        worksheet.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Auto-adjust column width and row height
        worksheet.Columns().AdjustToContents();
        worksheet.Rows().AdjustToContents();

        // Save the file to a memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        var fileBytes = stream.ToArray();
        var fileName = $"Daily Tasks {DateTime.Now:yyyyMMddHHmmss}.xlsx";
        // Trigger download in Blazor
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
    }

}
