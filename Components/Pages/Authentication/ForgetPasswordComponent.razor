@page "/forgot-password"
@layout AuthLayout
@inject IAppUserRepoistory _IUser
@inject IJSRuntime JS
@inject EmailServices _IEmail
@inject IPasswordHasherRepository _IPasswordHasher
@inject NavigationManager _Navigate
@inject ILogService LogService
@rendermode InteractiveServer

<style>
    /* Base Styles */
    :root {
        --primary-color: #4361ee;
        --primary-dark: #3a56d4;
        --secondary-color: #3f37c9;
        --accent-color: #4895ef;
        --danger-color: #f72585;
        --success-color: #4cc9f0;
        --light-color: #f8f9fa;
        --dark-color: #212529;
        --gray-color: #6c757d;
        --border-radius: 12px;
        --box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
        --icon-color: #4361ee;
        --label-color: #3a56d4;
    }

    /* Split Auth Container */
    .split-auth-container {
        display: flex;
        min-height: 100vh;
        width: 100%;
        position: relative;
        overflow: hidden;
        background-color: #f5f7ff;
    }

    /* Photo Column */
    .auth-photo-column {
        flex: 1;
        background: linear-gradient(135deg, rgba(67, 97, 238, 0.9) 0%, rgba(72, 149, 239, 0.9) 100%), url('https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80') no-repeat center center;
        background-size: cover;
        color: white;
        padding: 3rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        position: relative;
        overflow: hidden;
    }

    /* Geometric Pattern for Photo Column */
    .photo-column-pattern {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        opacity: 0.15;
        overflow: hidden;
    }

    .pattern-circle {
        position: absolute;
        border-radius: 50%;
        border: 2px solid white;
    }

    .pattern-square {
        position: absolute;
        border: 2px solid white;
        transform: rotate(45deg);
    }

    .pattern-triangle {
        position: absolute;
        width: 0;
        height: 0;
        border-left: 15px solid transparent;
        border-right: 15px solid transparent;
        border-bottom: 30px solid white;
    }

    .photo-content {
        position: relative;
        z-index: 1;
        max-width: 600px;
        margin: 0 auto;
        padding: 2.5rem;
    }

    .auth-brand-logo {
        display: flex;
        align-items: center;
        margin-bottom: 3rem;
        font-size: 1.75rem;
        font-weight: 600;
    }

        .auth-brand-logo i {
            font-size: 2.5rem;
            margin-right: 0.75rem;
            color: white;
        }

    .auth-welcome-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        line-height: 1.2;
    }

    .auth-welcome-text {
        font-size: 1.35rem;
        opacity: 0.9;
        margin-bottom: 2rem;
        line-height: 1.6;
    }

    /* Form Column */
    .auth-form-column {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 3rem;
        position: relative;
        overflow: hidden;
    }

    /* Geometric Background for Form */
    .form-background {
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        overflow: hidden;
        z-index: 0;
    }

    .form-bg-circle {
        position: absolute;
        border-radius: 50%;
        background: rgba(67, 97, 238, 0.08);
    }

    .form-bg-square {
        position: absolute;
        background: rgba(67, 97, 238, 0.05);
        transform: rotate(45deg);
    }

    .form-bg-triangle {
        position: absolute;
        width: 0;
        height: 0;
        border-left: 25px solid transparent;
        border-right: 25px solid transparent;
        border-bottom: 50px solid rgba(67, 97, 238, 0.06);
    }

    .auth-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        padding: 3rem;
        width: 100%;
        max-width: 500px;
        transition: var(--transition);
        position: relative;
        z-index: 1;
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .card-animate {
        transform: translateY(-5px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .auth-form-header {
        margin-bottom: 2.5rem;
        text-align: center;
    }

    .auth-form-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--dark-color);
        margin-bottom: 0.75rem;
    }

    .auth-form-subtitle {
        color: var(--gray-color);
        font-size: 1.05rem;
    }

    /* Form Elements */
    .floating-input-group {
        margin-bottom: 1.75rem;
        position: relative;
    }

    .floating-label {
        position: absolute;
        top: -10px;
        left: 15px;
        background: white;
        padding: 0 5px;
        font-size: 0.9rem;
        color: var(--label-color);
        font-weight: 500;
        z-index: 1;
        transition: var(--transition);
    }

    .input-container {
        position: relative;
        display: flex;
        align-items: center;
    }

    .input-icon {
        position: absolute;
        left: 15px;
        color: var(--icon-color);
        font-size: 1.2rem;
    }

    .floating-input {
        width: 100%;
        padding: 16px 16px 16px 50px;
        border: 1px solid #e0e0e0;
        border-radius: var(--border-radius);
        font-size: 1.05rem;
        transition: var(--transition);
    }

        .floating-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
            outline: none;
        }

    .validation-message {
        color: var(--danger-color);
        font-size: 0.85rem;
        margin-top: 0.25rem;
        display: block;
    }

    /* Submit Button */
    .submit-button {
        width: 100%;
        padding: 16px;
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: var(--border-radius);
        font-size: 1.05rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 1.75rem;
    }

        .submit-button:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
        }

        .submit-button i {
            margin-left: 10px;
            transition: var(--transition);
        }

        .submit-button:hover i {
            transform: translateX(5px);
        }

        .submit-button:disabled {
            opacity: 0.7;
            cursor: not-allowed;
            transform: none !important;
        }

    /* Back Link */
    .auth-alt-cta {
        text-align: center;
        font-size: 1rem;
        color: var(--gray-color);
    }

    .auth-link {
        color: var(--primary-color);
        text-decoration: none;
        transition: var(--transition);
    }

        .auth-link:hover {
            color: var(--primary-dark);
            text-decoration: underline;
        }

    /* Success Message */
    .success-message {
        background-color: rgba(16, 185, 129, 0.1);
        color: var(--success-color);
        padding: 1.25rem;
        border-radius: var(--border-radius);
        margin-bottom: 1.75rem;
        font-size: 0.95rem;
        border-left: 4px solid var(--success-color);
        display: flex;
        align-items: center;
        gap: 12px;
    }

        .success-message i {
            font-size: 1.5rem;
        }

    /* Spinner */
    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.2em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }

    /* Animation */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .auth-card {
        animation: fadeIn 0.6s ease-out forwards;
    }

    @@keyframes float {
        0% {
            transform: translateY(0px) rotate(0deg);
        }

        50% {
            transform: translateY(-20px) rotate(5deg);
        }

        100% {
            transform: translateY(0px) rotate(0deg);
        }
    }

    .form-bg-circle,
    .form-bg-square,
    .form-bg-triangle,
    .pattern-circle,
    .pattern-square,
    .pattern-triangle {
        animation: float 12s ease-in-out infinite;
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .split-auth-container {
            flex-direction: column;
        }

        .auth-photo-column {
            padding: 2rem;
            min-height: 350px;
        }

        .photo-content {
            padding: 2rem;
            text-align: center;
            max-width: 100%;
        }

        .auth-brand-logo {
            justify-content: center;
            margin-bottom: 2rem;
        }

        .auth-welcome-title {
            font-size: 2.5rem;
        }

        .auth-welcome-text {
            font-size: 1.2rem;
        }

        .auth-form-column {
            padding: 2rem;
        }

        .auth-card {
            padding: 2.5rem;
            max-width: 600px;
        }
    }

    @@media (max-width: 768px) {
        .auth-card {
            padding: 2rem;
        }

        .auth-form-title {
            font-size: 1.75rem;
        }

        .auth-form-subtitle {
            font-size: 1rem;
        }
    }

    @@media (max-width: 576px) {
        .auth-photo-column {
            padding: 1.5rem;
            min-height: 300px;
        }

        .auth-welcome-title {
            font-size: 2rem;
        }

        .auth-welcome-text {
            font-size: 1.1rem;
        }

        .auth-form-column {
            padding: 1.5rem;
        }

        .auth-card {
            padding: 1.75rem;
        }
    }
</style>

<div class="split-auth-container">
    <!-- Photo Column (Left) -->
    <div class="auth-photo-column">
        <!-- Geometric Pattern -->
        <div class="photo-column-pattern">
            <div class="pattern-circle" style="width: 120px; height: 120px; top: 10%; left: 15%;"></div>
            <div class="pattern-circle" style="width: 80px; height: 80px; bottom: 20%; right: 10%;"></div>
            <div class="pattern-square" style="width: 100px; height: 100px; top: 30%; right: 20%;"></div>
            <div class="pattern-triangle" style="top: 70%; left: 25%;"></div>
            <div class="pattern-square" style="width: 60px; height: 60px; bottom: 15%; left: 20%;"></div>
        </div>

        <div class="photo-content">
            <div class="auth-brand-logo">
                <i class="bi bi-patch-check-fill"></i>
                <span>Alex Support IT Ticketing System</span>
            </div>
            <h2 class="auth-welcome-title">Reset Your Password</h2>
            <p class="auth-welcome-text">Enter your email to receive a verification code and reset your password.</p>
        </div>
    </div>

    <!-- Form Column (Right) -->
    <div class="auth-form-column">
        <!-- Geometric Background -->
        <div class="form-background">
            <div class="form-bg-circle" style="width: 150px; height: 150px; top: 10%; right: 15%;"></div>
            <div class="form-bg-circle" style="width: 80px; height: 80px; bottom: 20%; left: 10%;"></div>
            <div class="form-bg-square" style="width: 120px; height: 120px; top: 30%; left: 20%;"></div>
            <div class="form-bg-triangle" style="top: 70%; right: 25%;"></div>
            <div class="form-bg-square" style="width: 70px; height: 70px; bottom: 15%; right: 20%;"></div>
            <div class="form-bg-circle" style="width: 100px; height: 100px; top: 50%; left: 50%; transform: translate(-50%, -50%);"></div>
        </div>

        <div class="auth-card card-animate">
            <div class="auth-form-header">
                <h1 class="auth-form-title">Forgot Password</h1>
                <p class="auth-form-subtitle">Enter your email to receive a verification code</p>
            </div>

            <EditForm Model="_forgotPasswordModel" OnValidSubmit="HandleValidSubmit" FormName="ResetPassword">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />

                <div class="floating-input-group">
                    <label for="emailInput" class="floating-label">Email Address</label>
                    <div class="input-container">
                        <i class="bi bi-envelope input-icon"></i>
                        <InputText @bind-Value="_forgotPasswordModel.Email"
                                   id="emailInput"
                                   class="floating-input" />
                    </div>
                    <ValidationMessage For="@(() => _forgotPasswordModel.Email)" class="validation-message" />
                </div>

                <button type="submit" class="submit-button" disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Send Verification Code</span>
                        <i class="bi bi-arrow-right"></i>
                    }
                </button>

                @if (_showSuccessMessage)
                {
                    <div class="success-message">
                        <i class="bi bi-check-circle-fill"></i>
                        <div>
                            <h5>Email Sent!</h5>
                            <p>If an account exists for this email, you'll receive a verification code shortly.</p>
                        </div>
                    </div>
                }

                <div class="auth-alt-cta">
                    Remember your password? <a href="/SignIn" class="auth-link">Sign In</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<VerifyCodeComponent verificationModel="CodeModel"
                     OnModalConfirmation="Confirm_Verification"
                     OnResendCode="HandleResendCode" />
<ResetPasswordComponent NewPassword="NewPasswordModel"
                        OnModalConfirmation="Confirm_Reset" />

@code {
    [SupplyParameterFromForm]
    private ForgotPasswordModel _forgotPasswordModel { get; set; } = new ForgotPasswordModel();
    private bool _isLoading = false;
    private bool _showSuccessMessage = false;
    private bool _cardAnimation = true;
    private VerificationModel CodeModel { get; set; } = new VerificationModel();
    private VerificationModel RealCodeModel { get; set; } = new VerificationModel();
    private AppUser user { get; set; } = new AppUser();
    private ResetPasswordModel NewPasswordModel { get; set; } = new ResetPasswordModel();

    private async Task HandleValidSubmit()
    {
        _isLoading = true;
        _showSuccessMessage = false;

        try
        {
            user = await _IUser.GetUserByEmailAsync(_forgotPasswordModel.Email);
            var code = _IUser.GenerateVerifyCode();
            RealCodeModel.Code = code.ToString();

            if (user.UID != 0)
            {
                await _IEmail.SendEmailAsync(
                    user.Email,
                    $"Hello {user.Fname + " " + user.Lname}",
                    "Verification For Reset Password",
                    $"<p>Dear {user.Fname} {user.Lname},</p><p>You have requested to reset your password for the Alex Support IT Ticketing System.</p><p>If this was not you, please contact support immediately.</p>",
                    code.ToString()
                );
                _showSuccessMessage = true;
                await JS.InvokeVoidAsync("ShowVerificationModalFormModal");
            }
            else
            {
                _showSuccessMessage = true; // Show success message even if email doesn't exist (security measure)
            }
        }
        finally
        {
            _isLoading = false;
        }
    }

    public async Task Confirm_Verification(VerificationModel Model)
    {
        await JS.InvokeVoidAsync("HideVerificationModalFormModal");
        if (Model.Code == RealCodeModel.Code)
        {
            await JS.InvokeVoidAsync("ShowResetPasswordFormModal");
        }
    }

    private async Task HandleResendCode()
    {
        var code = _IUser.GenerateVerifyCode();
        CodeModel.Code = code.ToString();
        await _IEmail.SendEmailAsync(
            user.Email,
            $"Hello {user.Fname + " " + user.Lname}",
            "Verification For Reset Password",
            $"<p>Dear {user.Fname} {user.Lname},</p><p>You have requested to reset your password for the Alex Support IT Ticketing System.</p><p>If this was not you, please contact support immediately.</p>",
            code.ToString()
        );
        await JS.InvokeVoidAsync("ShowVerificationModalFormModal");
    }

    private async Task Confirm_Reset(ResetPasswordModel model)
    {
        await JS.InvokeVoidAsync("HideResetPasswordFormModal");

        if (user.UID != 0 && model.Password == model.ConfirmPassword && !string.IsNullOrEmpty(model.Password))
        {
            var hashedPassword = _IPasswordHasher.HashPassword(model.Password);
            user.Password = hashedPassword;
            user = await _IUser.UpdateUserAsync(user);
            await LogService.CreateSystemLogAsync($"{user.LoginName} Reset Password", "APP USER");
            _Navigate.NavigateTo("/SignIn", true);
        }
    }
}