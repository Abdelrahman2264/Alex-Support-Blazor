@page "/SystemUsers"
@inject IAppUserRepoistory _IAppUser
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,Agent")]
<PageTitle>User Management</PageTitle>

<BsModal OnModalConfirmation="Activation"
         IconClass="@(IsActive ? "fas fa-user-slash" : "fas fa-user-check")"
         IconColorClass="@(IsActive ? "text-warning" : "text-success")"
         ButtonBootstrapStyle="@(IsActive ? "btn-warning" : "btn-success")"
         Title="@(IsActive ? "Deactivate User" : "Activate User")">
    <ChildContent>
        This action cannot be undone until you confirm it. Are you sure you want to @(IsActive ? "deactivate" : "activate") this user?
    </ChildContent>
</BsModal>

<style>
    :root {
        --primary-color: #4361ee;
        --primary-light: #eef2ff;
        --success-color: #10b981;
        --success-light: #ecfdf5;
        --danger-color: #ef4444;
        --danger-light: #fef2f2;
        --warning-color: #f59e0b;
        --warning-light: #fffbeb;
        --info-color: #3b82f6;
        --info-light: #eff6ff;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-700: #374151;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --transition-base: all 0.2s ease-in-out;
    }

    /* Header Styles */
    .page-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, white 100%);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow-sm);
        margin-bottom: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: white;
        margin: 0;
    }

    .page-icon {
        font-size: 2rem;
        color: white;
        margin-right: 1rem;
    }

    /* Search and Actions */
    .search-container {
        position: relative;
        width: 100%;
        max-width: 400px;
    }

    .search-input {
        border-radius: 50px;
        padding: 0.625rem 1.5rem 0.625rem 3rem;
        border: 1px solid var(--gray-200);
        font-size: 0.9375rem;
        transition: var(--transition-base);
        width: 100%;
    }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

    .search-icon {
        position: absolute;
        left: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--gray-300);
    }

    .clear-search {
        position: absolute;
        right: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--gray-400);
        cursor: pointer;
    }

    /* User Card Styles */
    .user-card {
        border-radius: 12px;
        overflow: hidden;
        border: none;
        box-shadow: var(--shadow-sm);
        transition: var(--transition-base);
        height: 100%;
        display: flex;
        flex-direction: column;
    }

        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

    .user-card-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--gray-200);
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .user-card-body {
        padding: 1.5rem;
        flex-grow: 1;
    }

    .user-card-footer {
        padding: 1rem 1.5rem;
        border-top: 1px solid var(--gray-200);
        background-color: var(--gray-100);
    }

    /* Status Badges */
    .status-badge {
        font-size: 0.75rem;
        padding: 0.4rem 0.75rem;
        border-radius: 50px;
        font-weight: 500;
    }

    .status-badge-active {
        background-color: var(--success-light);
        color: var(--success-color);
    }

    .status-badge-inactive {
        background-color: var(--danger-light);
        color: var(--danger-color);
    }

    /* User Info */
    .user-info-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.75rem;
        color: var(--gray-700);
    }

    .user-info-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--primary-light);
        border-radius: 6px;
        margin-right: 0.75rem;
        color: var(--primary-color);
    }

    /* Empty State */
    .empty-state {
        padding: 4rem 2rem;
        text-align: center;
        background: white;
        border-radius: 12px;
        box-shadow: var(--shadow-sm);
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 400px;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: var(--gray-200);
        margin-bottom: 1.5rem;
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 2rem;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
    }

    .page-item {
        list-style: none;
    }

    .page-link {
        padding: 0.5rem 0.75rem;
        border-radius: 8px;
        border: 1px solid var(--gray-200);
        color: var(--primary-color);
        text-decoration: none;
        transition: var(--transition-base);
    }

        .page-link:hover {
            background-color: var(--primary-light);
        }

    .page-item.active .page-link {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .page-item.disabled .page-link {
        color: var(--gray-300);
        pointer-events: none;
    }

    /* Responsive Adjustments */
    @@media (max-width: 768px) {
        .page-header

    {
        padding: 1.25rem;
    }

    .page-title {
        font-size: 1.5rem;
    }

    .header-actions {
        flex-direction: column;
        gap: 1rem;
    }

    .search-container {
        max-width: 100%;
    }

    .user-card-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
    }

    }

    @@media (max-width: 576px) {
        .user-card-body

    {
        padding: 1rem;
    }

    .user-info-item {
        flex-direction: column;
        align-items: flex-start;
    }

    .user-info-icon {
        margin-bottom: 0.5rem;
        margin-right: 0;
    }

    }

    /* Animation for cards */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .user-card {
        animation: fadeIn 0.3s ease-out forwards;
        opacity: 0;
    }

        .user-card:nth-child(1) {
            animation-delay: 0.1s;
        }

        .user-card:nth-child(2) {
            animation-delay: 0.2s;
        }

        .user-card:nth-child(3) {
            animation-delay: 0.3s;
        }

        .user-card:nth-child(4) {
            animation-delay: 0.4s;
        }

        .user-card:nth-child(5) {
            animation-delay: 0.5s;
        }

        .user-card:nth-child(6) {
            animation-delay: 0.6s;
        }
</style>

@if (isLoading)
{
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex flex-column align-items-center justify-content-center bg-white bg-opacity-75 z-index-1050">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3 text-muted">Loading users...</p>
    </div>
}
else
{
    <div class="container-fluid px-3 px-md-4 py-3">
        <!-- Header Section -->
        <div class="page-header">
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
                <div class="d-flex align-items-center">
                    <i class="bi bi-people page-icon"></i>
                    <div>
                        <h1 class="page-title">System Users</h1>
                        <p class="text-dark mb-0 d-none d-md-block">Manage all system users and permissions</p>
                    </div>
                </div>

                <div class="d-flex header-actions align-items-center gap-3">
                    <!-- Search Input -->
                    <div class="search-container">
                        <i class="bi bi-search search-icon"></i>
                        <input type="text"
                               class="form-control search-input"
                               placeholder="Search users..."
                               @bind="searchTerm"
                               @oninput="HandleSearchInput" />
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="clear-search"
                                    type="button"
                                    @onclick="ClearSearch">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        }
                    </div>

                    <!-- Status Filter -->
                    <select class="form-select" @bind="statusFilter" style="max-width: 150px;">
                        <option value="">All Users</option>
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>

                    <!-- Export Button -->
                    <button class="btn btn-primary d-flex align-items-center gap-2"
                            @onclick="ExportToExcel">
                        <i class="bi bi-file-earmark-excel"></i>
                        <span class="d-none d-md-inline">Export</span>
                    </button>

                    <!-- Add User Button -->
                    <AuthorizeView Roles="Admin">
                        <a href="/SignUp" class="btn btn-success d-flex align-items-center gap-2">
                            <i class="bi bi-plus-circle"></i>
                            <span class="d-none d-md-inline">Add User</span>
                        </a>
                    </AuthorizeView>
                </div>
            </div>
        </div>

        <!-- Content Section -->
        <div class="card border-0 shadow-sm rounded-3 overflow-hidden">
            <div class="card-body p-4">
                @if (FilteredUsers.Any())
                {
                    <!-- Users Grid -->
                    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4">
                        @foreach (var user in PagedUsers)
                        {
                            <div class="col">
                                <div class="user-card @(!user.IsActive ? "inactive" : "")">
                                    <div class="user-card-header">
                                        <div class="bg-primary bg-opacity-10 rounded p-2">
                                            <i class="bi bi-person-badge text-primary"></i>
                                        </div>
                                        <div>
                                            <h5 class="mb-1">@user.Fname @user.Lname</h5>
                                            <small class="text-muted">@user.LoginName</small>
                                        </div>
                                        <span class="status-badge @(user.IsActive ? "status-badge-active" : "status-badge-inactive") ms-auto">
                                            @(user.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </div>
                                    <div class="user-card-body">
                                        <div class="user-info-item">
                                            <div class="user-info-icon">
                                                <i class="bi bi-envelope"></i>
                                            </div>
                                            <span>@user.Email</span>
                                        </div>
                                        <div class="user-info-item">
                                            <div class="user-info-icon">
                                                <i class="bi bi-briefcase"></i>
                                            </div>
                                            <span>@user.JobTitle</span>
                                        </div>
                                        <div class="user-info-item">
                                            <div class="user-info-icon">
                                                <i class="bi bi-building"></i>
                                            </div>
                                            <span>@(user.Department?.DepartmentName ?? "No Department")</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(user.Fingerprint.ToString()))                                        {
                                            <div class="user-info-item">
                                                <div class="user-info-icon">
                                                    <i class="bi bi-fingerprint"></i>
                                                </div>
                                                <span>Fingerprint Registered</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="user-card-footer">
                                        <AuthorizeView Roles="Admin">
                                            <Authorized>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-outline-primary btn-sm flex-grow-1"
                                                            @onclick="() => EditUser(user.UID)">
                                                        <i class="bi bi-pencil-square me-1"></i>Edit
                                                    </button>
                                                    @if (user.IsActive)
                                                    {
                                                        <button class="btn btn-outline-danger btn-sm flex-grow-1"
                                                                @onclick="() => InActiveUserShowModal(user.UID)">
                                                            <i class="bi bi-person-x me-1"></i>Deactivate
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-outline-success btn-sm flex-grow-1"
                                                                @onclick="() => ActiveUserShowModal(user.UID)">
                                                            <i class="bi bi-person-check me-1"></i>Activate
                                                        </button>
                                                    }
                                                </div>
                                            </Authorized>
                                            <NotAuthorized>
                                                <div class="d-flex gap-2">
                                                    <button class="btn btn-outline-secondary btn-sm flex-grow-1 disabled" disabled>
                                                        <i class="bi bi-pencil-square me-1"></i>Edit
                                                    </button>
                                                    <button class="btn btn-outline-secondary btn-sm flex-grow-1 disabled" disabled>
                                                        <i class="bi bi-person-x me-1"></i>Manage
                                                    </button>
                                                </div>
                                            </NotAuthorized>
                                        </AuthorizeView>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (totalPages > 1)
                    {
                        <div class="pagination-container">
                            <ul class="pagination">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(1)" aria-label="First">
                                        <i class="bi bi-chevron-double-left"></i>
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" aria-label="Previous">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                </li>

                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }

                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" aria-label="Next">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(totalPages)" aria-label="Last">
                                        <i class="bi bi-chevron-double-right"></i>
                                    </button>
                                </li>
                            </ul>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="bi bi-people empty-state-icon"></i>
                        <h4 class="text-muted mb-3">
                            @(string.IsNullOrEmpty(searchTerm) ? "No Users Found" : "No matching users found")
                        </h4>
                        <p class="text-muted mb-4">
                            @(string.IsNullOrEmpty(searchTerm)
                                                ? "Create your first user to get started"
                                                : "Try adjusting your search criteria")
                </p>
                <AuthorizeView Roles="Admin">
                    <a href="/SignUp" class="btn btn-primary">
                        <i class="bi bi-plus-circle me-2"></i>Add User
                    </a>
                </AuthorizeView>
            </div>
                        }
            </div>
        </div>
    </div>
}

@code {
    // Pagination variables
    private int currentPage = 1;
    private const int pageSize = 20; // Number of users per page
    private int totalPages = 1;

    // Computed property for current page users
    private IEnumerable<AppUser> PagedUsers =>
        FilteredUsers.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CalculateTotalPages();
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling((double)FilteredUsers.Count() / pageSize);
        if (currentPage > totalPages && totalPages > 0)
        {
            currentPage = totalPages;
        }
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        StateHasChanged();
    }

}
@code {
    private IEnumerable<AppUser> allUsers = new List<AppUser>();
    private bool IsActive { get; set; } = true; // or false depending on user status

    private IEnumerable<AppUser> FilteredUsers => allUsers
        .Where(u =>
            string.IsNullOrEmpty(searchTerm) ||
            (u.Fname?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.Lname?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.LoginName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.JobTitle?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.Department?.DepartmentName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
        )
        .Where(u =>
            string.IsNullOrEmpty(statusFilter) ||
            u.IsActive == bool.Parse(statusFilter)
        )
        .OrderBy(u => u.Lname)
        .ThenBy(u => u.Fname);

  

    private bool isLoading = true;
    private string searchTerm = "";
    private string statusFilter = "";

    private int InActivatedUserId = 0;
    private int ActivatedUserId = 0;
    private string title = "";
    private string buttonstyle = "";
    private string buttontext = "";
    private Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(TimeSpan.FromSeconds(0.1));
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        allUsers = await _IAppUser.GetAllUsersAsync();
        isLoading = false;
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        currentPage = 1;

        // Debounce the search to avoid too many rapid updates
        debounceTimer?.Dispose();
        debounceTimer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 300, Timeout.Infinite);
    }

    private void ClearSearch()
    {
        searchTerm = "";
        statusFilter = "";
        currentPage = 1;
    }

    private void EditUser(int userId)
    {
        Navigation.NavigateTo($"/users/edit/{userId}");
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void GoToPage(int page)
    {
        currentPage = page;
    }

    private async Task InActiveUserShowModal(int userId)
    {
        title = "Are You Sure You Want To Deactivate This User?";
        buttonstyle = "btn-danger";
        buttontext = "Deactivate";
        InActivatedUserId = userId;
        ActivatedUserId = 0;
        IsActive = true;
        await JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ActiveUserShowModal(int userId)
    {
        title = "Are You Sure You Want To Activate This User?";
        buttonstyle = "btn-success";
        buttontext = "Activate";
        ActivatedUserId = userId;
        InActivatedUserId = 0;
        IsActive = false;

        await JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task Activation()
    {
        await JS.InvokeVoidAsync("HideConfirmationModal");

        if (ActivatedUserId != 0)
        {
            bool flag = await _IAppUser.ActiveUserAsync(ActivatedUserId);
            if (flag)
                await JS.ToastrSuccess("User Activated Successfully");
            else
                await JS.ToastrError("Failed to activate user. Please try again!");
        }
        else if (InActivatedUserId != 0)
        {
            bool flag = await _IAppUser.InActiveUserAsync(InActivatedUserId);
            if (flag)
                await JS.ToastrSuccess("User Deactivated Successfully");
            else
                await JS.ToastrError("Failed to deactivate user. Please try again!");
        }

        await LoadUsers();
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}






@code {
    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("SystemUsers");

        // Add headers
        worksheet.Cell(1, 1).Value = "USER ID";
        worksheet.Cell(1, 2).Value = "First Name";
        worksheet.Cell(1, 3).Value = "Last Name";
        worksheet.Cell(1, 4).Value = "Full Name";
        worksheet.Cell(1, 5).Value = "Email";
        worksheet.Cell(1, 6).Value = "Login Name";
        worksheet.Cell(1, 7).Value = "Fingerprint";
        worksheet.Cell(1, 8).Value = "Phone Number";
        worksheet.Cell(1, 9).Value = "Department";
        worksheet.Cell(1, 10).Value = "Job Title";
        worksheet.Cell(1, 11).Value = "Email Verified";
        worksheet.Cell(1, 12).Value = "Activation";
        worksheet.Cell(1, 13).Value = "Role";
        worksheet.Cell(1, 14).Value = "Sign Up Date";


        // Add data
        int row = 2;
        foreach (var user in FilteredUsers)
        {
            worksheet.Cell(row, 1).Value = user.UID;
            worksheet.Cell(row, 2).Value = user.Fname;
            worksheet.Cell(row, 3).Value = user.Lname;
            worksheet.Cell(row, 4).Value = user.Fname + " " + user.Lname;
            worksheet.Cell(row, 5).Value = user.Email;
            worksheet.Cell(row, 6).Value = user.LoginName;
            worksheet.Cell(row, 7).Value = user.Fingerprint;
            worksheet.Cell(row, 8).Value = user.Phone;
            worksheet.Cell(row, 9).Value = user.Department.DepartmentName;
            worksheet.Cell(row, 10).Value = user.JobTitle;
            worksheet.Cell(row, 11).Value = user.EmailVerified;
            worksheet.Cell(row, 12).Value = user.IsActive ? "Active" : "Inactive";
            worksheet.Cell(row, 13).Value = user.Role;
            worksheet.Cell(row, 14).Value = user.Create_Date;
            row++;
        }

        // Create a new workbook and worksheet

        // Set the header row style
        var headerRow = worksheet.Range(1, 1, 1, worksheet.LastColumnUsed().ColumnNumber());
        headerRow.SetAutoFilter(true);
        headerRow.Style.Font.Bold = true;
        headerRow.Style.Font.FontColor = XLColor.Black;
        headerRow.Style.Fill.BackgroundColor = XLColor.OrangeColorWheel;
        headerRow.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        headerRow.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Apply borders to the entire worksheet

        worksheet.RangeUsed().Style.Border.OutsideBorder = XLBorderStyleValues.Thick;
        worksheet.RangeUsed().Style.Border.InsideBorder = XLBorderStyleValues.Thick;

        // Set the font and alignment for all cells
        worksheet.Style.Font.FontName = "Arial";
        worksheet.Style.Font.FontSize = 10;
        headerRow.Style.Font.FontSize = 10;

        worksheet.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
        worksheet.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Auto-adjust column width and row height
        worksheet.Columns().AdjustToContents();
        worksheet.Rows().AdjustToContents();

        // Save the file to a memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        var fileBytes = stream.ToArray();
        var fileName = $"SystemUsers{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        // Trigger download in Blazor
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
    }

}
