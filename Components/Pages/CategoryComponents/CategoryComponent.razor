@page "/Categories"
@inject ICategoryRepository _ICategory
@inject IJSRuntime JS
@using AlexSupport.ViewModels;
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin,Agent")]
<PageTitle>Category Types</PageTitle>

<BsModal OnModalConfirmation="ConfirmDelete_Click"
         IconClass="fas fa-trash-alt"
         IconColorClass="text-danger"
         ButtonBootstrapStyle="btn-danger"
         Title="Inactive Category">
    <ChildContent>
        This action cannot be undone until you confirm it. Are you sure you want to inactive this category?
    </ChildContent>
</BsModal>

<style>
    :root {
        --primary-color: #4361ee;
        --primary-light: #eef2ff;
        --success-color: #10b981;
        --success-light: #ecfdf5;
        --danger-color: #ef4444;
        --danger-light: #fef2f2;
        --warning-color: #f59e0b;
        --warning-light: #fffbeb;
        --info-color: #3b82f6;
        --info-light: #eff6ff;
        --gray-100: #f3f4f6;
        --gray-200: #e5e7eb;
        --gray-300: #d1d5db;
        --gray-700: #374151;
        --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        --transition-base: all 0.2s ease-in-out;
    }

    /* Base Card Styles */
    .department-card {
        transition: var(--transition-base);
        border-radius: 12px;
        overflow: hidden;
        border: none;
        box-shadow: var(--shadow-sm);
        height: 100%;
        display: flex;
        flex-direction: column;
        background: white;
    }

        .department-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-lg);
        }

    .card-header {
        border-bottom: none;
        padding: 1.5rem;
        background: linear-gradient(135deg, var(--primary-light) 0%, white 100%);
    }

    .card-body {
        padding: 1.5rem;
        flex-grow: 1;
    }

    .card-footer {
        background: white;
        border-top: 1px solid var(--gray-200);
        padding: 1.25rem 1.5rem;
    }

    /* Status Badges */
    .status-badge {
        font-size: 0.75rem;
        padding: 0.4rem 0.75rem;
        border-radius: 50px;
        font-weight: 500;
        letter-spacing: 0.5px;
    }

    .badge-active {
        background-color: var(--success-light);
        color: var(--success-color);
    }

    .badge-inactive {
        background-color: var(--gray-100);
        color: var(--gray-700);
    }

    /* Search and Actions */
    .search-container {
        position: relative;
        width: 100%;
        max-width: 400px;
    }

    .search-input {
        border-radius: 50px;
        padding: 0.625rem 1.5rem 0.625rem 3rem;
        border: 1px solid var(--gray-200);
        font-size: 0.9375rem;
        transition: var(--transition-base);
        width: 100%;
    }

        .search-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.15);
        }

    .search-icon {
        position: absolute;
        left: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--gray-300);
    }

    .clear-search {
        position: absolute;
        right: 1.25rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--gray-400);
        cursor: pointer;
    }

    /* Buttons */
    .action-btn {
        transition: var(--transition-base);
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        border: 1px solid transparent;
    }

    .btn-primary {
        background-color: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background-color: #3a56d4;
            transform: translateY(-1px);
        }

    .btn-outline-primary {
        border-color: var(--primary-color);
        color: var(--primary-color);
        background: white;
    }

        .btn-outline-primary:hover {
            background-color: var(--primary-light);
            color:blue;
        }

    .btn-outline-danger {
        border-color: var(--danger-color);
        color: var(--danger-color);
    }

        .btn-outline-danger:hover {
            background-color: var(--danger-light);
            color:red;
        }

    /* Loading Skeletons */
    .skeleton {
        background-color: var(--gray-100);
        border-radius: 6px;
        overflow: hidden;
        position: relative;
    }

        .skeleton::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.3) 50%, rgba(255,255,255,0) 100%);
            animation: shimmer 1.5s infinite;
        }

    .skeleton-text {
        height: 1rem;
        margin-bottom: 0.75rem;
    }

    .skeleton-btn {
        width: 80px;
        height: 38px;
    }

    @@keyframes shimmer {
        0% {
            transform: translateX(-100%);
        }

        100% {
            transform: translateX(100%);
        }
    }

    /* Empty State */
    .empty-state-container {
        grid-column: 1 / -1;
    }

    .empty-state {
        padding: 4rem 2rem;
        text-align: center;
        background: white;
        border-radius: 12px;
        box-shadow: var(--shadow-sm);
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 400px;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: var(--gray-200);
        margin-bottom: 1.5rem;
    }

    /* Header Styles */
    .page-header {
        background: linear-gradient(135deg, var(--primary-color) 0%, white 100%);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow-sm);
        margin-bottom: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 700;
        color: white;
        margin: 0;
    }

    .page-icon {
        font-size: 2rem;
        color: white;
        margin-right: 1rem;
    }

    .header-actions-container {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .header-buttons {
        display: flex;
        gap: 0.75rem;
    }

    /* Responsive Grid */
    .departments-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    /* Responsive Adjustments */
    @@media (max-width: 992px) {
        .departments-grid {
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .header-actions {
            flex-direction: column;
            gap: 1rem;
            width: 100%;
        }

        .header-buttons {
            width: 100%;
            justify-content: flex-end;
        }

        .search-container {
            max-width: 100%;
        }

        .page-header {
            padding: 1.25rem;
        }

        .page-title {
            font-size: 1.5rem;
        }
    }

    @@media (max-width: 576px) {
        .card-header, .card-body, .card-footer {
            padding: 1.25rem;
        }

        .departments-grid {
            grid-template-columns: 1fr;
        }

        .action-btn span {
            display: none;
        }

        .action-btn {
            padding: 0.5rem;
            width: 36px;
            height: 36px;
            display: inline-flex;
            justify-content: center;
            align-items: center;
        }

        .header-buttons {
            justify-content: space-between;
        }

        .empty-state {
            padding: 3rem 1.5rem;
            min-height: 300px;
        }

        .empty-state-icon {
            font-size: 3rem;
        }
    }

    /* Animation for cards */
    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .department-card {
        animation: fadeIn 0.3s ease-out forwards;
        opacity: 0;
    }

        .department-card:nth-child(1) {
            animation-delay: 0.1s;
        }

        .department-card:nth-child(2) {
            animation-delay: 0.2s;
        }

        .department-card:nth-child(3) {
            animation-delay: 0.3s;
        }

        .department-card:nth-child(4) {
            animation-delay: 0.4s;
        }

        .department-card:nth-child(5) {
            animation-delay: 0.5s;
        }

        .department-card:nth-child(6) {
            animation-delay: 0.6s;
        }
</style>

<div class="container-fluid px-3 px-md-4 py-3">
    <!-- Header Section -->
    <div class="page-header">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-md-center gap-3">
            <div class="d-flex align-items-center">
                <i class="fas fa-tags page-icon"></i>
                <div>
                    <h1 class="page-title">categories Management</h1>
                    <p class="text-black  mb-0 d-none d-md-block">Manage all organizational categories</p>
                </div>
            </div>

            <div class="header-actions-container">
                <!-- Search Input -->
                <div class="search-container">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text"
                           class="form-control search-input"
                           placeholder="Search categories..."
                           @bind="searchTerm"
                           @oninput="HandleSearchInput" />
                    @if (!string.IsNullOrWhiteSpace(searchTerm))
                    {
                        <button class="clear-search"
                                type="button"
                                @onclick="ClearSearch">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </div>

                <!-- Action Buttons -->
                <div class="header-buttons">
                    <!-- Add New Department Button -->
                    <a class="btn btn-primary d-flex align-items-center gap-2 action-btn" href="categories/create">
                        <i class="fas fa-plus"></i>
                        <span class="d-none d-md-inline">Add Category</span>
                    </a>

                    <!-- Export Button -->
                    <button class="btn btn-outline-primary d-flex align-items-center gap-2 action-btn"
                            @onclick="ExportToExcel"
                            disabled="@isProcessing">
                        <i class="fas fa-file-excel"></i>
                        <span class="d-none d-md-inline">Export</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isProcessing && !FilteredTypes.Any())
    {
        <div class="departments-grid">
            @for (int i = 0; i < 6; i++)
            {
                <div class="department-card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="skeleton skeleton-text" style="width: 70%; height: 1.75rem;"></div>
                            <div class="skeleton skeleton-text" style="width: 20%; height: 1.5rem;"></div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="skeleton skeleton-text" style="width: 40%; margin-bottom: 1.5rem;"></div>
                        <div class="skeleton skeleton-text" style="width: 60%;"></div>
                        <div class="skeleton skeleton-text" style="width: 50%; margin-top: 1.5rem;"></div>
                    </div>
                    <div class="card-footer d-flex justify-content-end gap-2">
                        <div class="skeleton skeleton-btn"></div>
                        <div class="skeleton skeleton-btn"></div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <!-- Departments Grid -->
        <div class="departments-grid">
            @if (FilteredTypes.Any())
            {
                @foreach (var category in FilteredTypes)
                {
                    <div class="department-card">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0 fw-semibold text-dark">
                                    <i class="fas fa-tag me-2 text-primary"></i>
                                    @category.CategoryName
                                </h5>
                                <span class="status-badge @(category.IsActive ? "badge-active" : "badge-inactive")">
                                    <i class="fas @(category.IsActive ? "fa-check-circle" : "fa-times-circle") me-1"></i>
                                    @(category.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="department-info mb-3">
                                <div class="d-flex align-items-center text-muted mb-2">
                                    <i class="fas fa-id-card me-2"></i>
                                    <span>Category ID:</span>
                                    <span class="ms-2 fw-medium text-dark">@category.CID</span>
                                </div>

                                <div class="d-flex align-items-center text-muted">
                                    <i class="fas fa-calendar-alt me-2"></i>
                                    <span>Created:</span>
                                    <span class="ms-2 fw-medium text-dark">@category.CreatedDate.ToString("dd MMM yyyy")</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer d-flex justify-content-end gap-2">
                            <a class="btn btn-outline-primary action-btn" href="categories/update/@category.CID">
                                <i class="fas fa-edit"></i>
                                <span class="d-none d-lg-inline">Edit</span>
                            </a>
                            <button class="btn btn-outline-danger action-btn"
                                    @onclick="() => HandleDelete(category.CID)">
                                <i class="fas fa-trash-alt"></i>
                                <span class="d-none d-lg-inline">Delete</span>
                            </button>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state-container">
                    <div class="empty-state">
                        <i class="fas fa-tags empty-state-icon"></i>
                        <h4 class="text-muted mb-3">
                            @(!string.IsNullOrWhiteSpace(searchTerm) ? "No matching categories found" : "No categories available")
                        </h4>
                        <p class="text-muted mb-4">
                            @(!string.IsNullOrWhiteSpace(searchTerm)
                                                ? "Try adjusting your search criteria"
                                                : "Add a new category to get started")
                </p>
                @if (!string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <button class="btn btn-primary action-btn" @onclick="ClearSearch">
                                <i class="fas fa-times me-2"></i>Clear search
                            </button>
                        }
                        else
                        {
                            <a class="btn btn-primary action-btn" href="categories/create">
                                <i class="fas fa-plus me-2"></i>Add category
                            </a>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private bool isProcessing { get; set; } = false;
    private IEnumerable<Category> Types { get; set; } = new List<Category>();
    private IEnumerable<Category> FilteredTypes { get; set; } = new List<Category>();
    private int AssignId { get; set; }
    private string searchTerm = string.Empty;
    private Timer? debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        isProcessing = true;
        await Task.Delay(TimeSpan.FromSeconds(0.1));
        await LoadTypes();
        isProcessing = false;
    }

    private async Task LoadTypes()
    {
        Types = await _ICategory.AllCategoriesAsync();
        FilteredTypes = Types;
    }

    private void HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Debounce the search to avoid too many rapid updates
        debounceTimer?.Dispose();
        debounceTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterCategories();
                StateHasChanged();
            });
        }, null, 300, Timeout.Infinite);
    }

    private void FilterCategories()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            FilteredTypes = Types;
        }
        else
        {
            var term = searchTerm.ToLower();
            FilteredTypes = Types.Where(c =>
                c.CategoryName.ToLower().Contains(term))
                .ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FilteredTypes = Types;
    }

    private async Task HandleDelete(int id)
    {
        AssignId = id;
        await JS.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        isProcessing = true;
        await JS.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && AssignId != 0)
        {
            var result = await _ICategory.DeleteCategoryAsync(AssignId);
            if (result)
                JS?.ToastrSuccess("Category Type Delete Successfully");
            else
                JS?.ToastrError("Error Encountered while deleting");

            await LoadTypes();
        }

        AssignId = 0;
        isProcessing = false;
    }

    public void Dispose()
    {
        debounceTimer?.Dispose();
    }
}



@code {
    private async Task ExportToExcel()
    {
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("Categories");

        // Add headers
        worksheet.Cell(1, 1).Value = "CategoryId";
        worksheet.Cell(1, 2).Value = "Name";
        worksheet.Cell(1, 3).Value = "Created Date";
        worksheet.Cell(1, 4).Value = "IsActive";


        // Add data
        int row = 2;
        foreach (var category in FilteredTypes)
        {
            worksheet.Cell(row, 1).Value = category.CID;
            worksheet.Cell(row, 2).Value = category.CategoryName;
            worksheet.Cell(row, 3).Value = category.CreatedDate;
            worksheet.Cell(row, 4).Value = category.IsActive == true ? "Active" : "Inactive";
            row++;
        }

        // Create a new workbook and worksheet

        // Set the header row style
        var headerRow = worksheet.Range(1, 1, 1, worksheet.LastColumnUsed().ColumnNumber());
        headerRow.SetAutoFilter(true);
        headerRow.Style.Font.Bold = true;
        headerRow.Style.Font.FontColor = XLColor.Black;
        headerRow.Style.Fill.BackgroundColor = XLColor.OrangeColorWheel;
        headerRow.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
        headerRow.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Apply borders to the entire worksheet

        worksheet.RangeUsed().Style.Border.OutsideBorder = XLBorderStyleValues.Thick;
        worksheet.RangeUsed().Style.Border.InsideBorder = XLBorderStyleValues.Thick;

        // Set the font and alignment for all cells
        worksheet.Style.Font.FontName = "Arial";
        worksheet.Style.Font.FontSize = 10;
        headerRow.Style.Font.FontSize = 10;

        worksheet.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
        worksheet.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

        // Auto-adjust column width and row height
        worksheet.Columns().AdjustToContents();
        worksheet.Rows().AdjustToContents();

        // Save the file to a memory stream
        using var stream = new MemoryStream();
        workbook.SaveAs(stream);
        var fileBytes = stream.ToArray();
        var fileName = $"Categories{DateTime.Now:yyyyMMddHHmmss}.xlsx";
        // Trigger download in Blazor
        await JS.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
    }

}
