@attribute [Authorize(Roles = "Admin,Agent")]

<div class="modal fade align-content-center" id="AddSolution" tabindex="-1" aria-labelledby="assignTicketModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header bg-gradient-primary text-white py-3">
                <div class="d-flex align-items-center">
                    <i class="fas fa-lightbulb me-3 fs-4"></i>
                    <h5 class="modal-title mb-0 fs-5">@Title</h5>
                </div>
                <button type="button" class="btn-close btn-close-white opacity-100" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <EditForm Model="ticket" OnSubmit="ConfirmationClicked">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger mb-4 animated fadeIn" />

                    <!-- Solution Field -->
                    <div class="form-floating mb-4">
                        <InputTextArea @bind-Value="ticket.Solution"
                                       class="form-control solution-textarea"
                                       id="solutionInput"
                                       placeholder=" "
                                       required
                                       style="min-height: 150px" />
                        <label for="solutionInput" class="text-muted">
                            <i class="fas fa-edit me-2"></i>Solution Details
                        </label>
                        <ValidationMessage For="@(() => ticket.Solution)" class="text-danger small mt-1 animated fadeIn" />
                        <div class="form-text ps-4 mt-2">
                            <i class="fas fa-info-circle me-2"></i>Describe your solution in detail
                        </div>
                    </div>

                    <div class="modal-footer border-top-0 pt-3">
                        <button type="button"
                                class="btn btn-outline-secondary btn-hover-scale"
                                data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>Cancel
                        </button>
                        <button type="submit"
                                class="btn btn-primary btn-hover-scale btn-glow"
                                disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            else
                            {
                                <i class="fas fa-check-circle me-2"></i>
                            }
                            Submit Solution
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    /* Import Font Awesome for icons */
    @@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');

    /* Base Styling */
    .modal-content {
        border-radius: 0.75rem;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .modal-header {
        background: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
        border-bottom: none;
    }

    .form-floating label {
        padding-left: 2.5rem;
        color: #6c757d;
    }

    .form-floating > .form-control {
        padding-left: 2.5rem;
        border-radius: 0.5rem;
        border: 1px solid #e0e0e0;
        transition: all 0.3s;
    }

        .form-floating > .form-control:focus {
            border-color: #4e73df;
            box-shadow: 0 0 0 0.25rem rgba(78, 115, 223, 0.25);
        }

    .solution-textarea {
        min-height: 150px;
        resize: vertical;
    }

    /* Icon styling */
    .form-floating > label > i {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: #b7b9cc;
    }

    /* Button effects */
    .btn-hover-scale {
        transition: all 0.3s ease;
        border-radius: 0.5rem;
        padding: 0.5rem 1.25rem;
    }

        .btn-hover-scale:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .btn-glow {
        position: relative;
        overflow: hidden;
    }

        .btn-glow:after {
            content: '';
            position: absolute;
            top: -50%;
            left: -60%;
            width: 200%;
            height: 200%;
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(30deg);
            transition: all 0.3s;
        }

        .btn-glow:hover:after {
            left: 100%;
        }

    /* Animations */
    .animated {
        animation-duration: 0.5s;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .fadeIn {
        animation-name: fadeIn;
    }

    /* Responsive adjustments */
    @@media (max-width: 767.98px) {
        .modal-dialog {
            margin: 1rem auto;
        }

        .form-floating label {
            padding-left: 2rem;
        }

        .form-floating > .form-control {
            padding-left: 2rem;
        }

        .solution-textarea {
            min-height: 120px;
        }
    }

    @@media (max-width: 576px) {
        .modal-header {
            padding: 1rem;
        }

        .modal-body {
            padding: 1.25rem;
        }

        .btn-hover-scale {
            padding: 0.4rem 1rem;
            font-size: 0.9rem;
        }
    }
</style>

@code {
    private bool isSubmitting = false;

    [Parameter]
    public string Title { get; set; } = "Add Solution";

    [Parameter]
    public Ticket ticket { get; set; } = new Ticket();

    [Parameter]
    public EventCallback<Ticket> OnModalConfirmation { get; set; }

    private async Task ConfirmationClicked()
    {
        isSubmitting = true;
        try
        {
            await OnModalConfirmation.InvokeAsync(ticket);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
