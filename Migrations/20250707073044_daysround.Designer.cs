// <auto-generated />
using System;
using AlexSupport.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AlexSupport.Migrations
{
    [DbContext(typeof(AlexSupportDB))]
    [Migration("20250707073044_daysround")]
    partial class daysround
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlexSupport.ViewModels.AppUser", b =>
                {
                    b.Property<int>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("UID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UID"));

                    b.Property<DateTime>("Create_Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Create_Date")
                        .HasDefaultValueSql("(sysdatetime())");

                    b.Property<int>("DID")
                        .HasColumnType("INT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(150)")
                        .HasColumnName("Email");

                    b.Property<string>("EmailVerified")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<int>("Fingerprint")
                        .HasColumnType("INT")
                        .HasColumnName("Fingerprint");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Fname");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("JobTitle");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Lname");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("LoginName");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("MobilePhone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(250)")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(20)");

                    b.HasKey("UID")
                        .HasName("APPUSERUID_PK");

                    b.HasIndex("DID");

                    b.HasIndex(new[] { "Email" }, "APPUSEREMAIL_UQ")
                        .IsUnique();

                    b.HasIndex(new[] { "Fingerprint" }, "APPUSERFINGERPRINT_UQ")
                        .IsUnique();

                    b.HasIndex(new[] { "LoginName" }, "APPUSERLOGINNAME_UQ")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "APPUSERPHONE_UQ")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("AppUsers", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Category", b =>
                {
                    b.Property<int>("CID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("CID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Category Name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CID")
                        .HasName("CATEGORYID_PK");

                    b.ToTable("Categories", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.ChatMessage", b =>
                {
                    b.Property<int>("CHID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CHID"));

                    b.Property<string>("ImageContentType")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("SenderId")
                        .HasColumnType("INT");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId")
                        .HasColumnType("INT");

                    b.HasKey("CHID")
                        .HasName("CHATMESSAGEID_PK");

                    b.HasIndex("SenderId");

                    b.HasIndex("TicketId");

                    b.ToTable("ChatMessages", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.DailyTasks", b =>
                {
                    b.Property<int>("DTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DTID"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("INT");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Due_Minutes")
                        .HasColumnType("INT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasMaxLength(850)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(850)")
                        .HasColumnName("Issue");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Subject");

                    b.Property<int>("TypeName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("INT")
                        .HasColumnName("Type");

                    b.HasKey("DTID")
                        .HasName("DAILYTASKID_PK");

                    b.HasIndex("AgentId");

                    b.HasIndex("CategoryID");

                    b.ToTable("DailyTasks", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Department", b =>
                {
                    b.Property<int>("DID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("DID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Department Name");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("DID")
                        .HasName("DEPARTMENTID_PK");

                    b.ToTable("Departments", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Location", b =>
                {
                    b.Property<int>("LID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("LID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Location Name");

                    b.HasKey("LID")
                        .HasName("LOCATIONID_PK");

                    b.ToTable("Locations", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.SystemLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("SYSTEMLOGS ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Action");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("actionTime")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Action Time");

                    b.HasKey("Id")
                        .HasName("SYSTEMLOGID_PK");

                    b.HasIndex("UID");

                    b.ToTable("SystemLogs", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.SystemNotification", b =>
                {
                    b.Property<int>("NID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NID"));

                    b.Property<int?>("AppUserUID")
                        .HasColumnType("INT");

                    b.Property<int?>("AppUserUID1")
                        .HasColumnType("INT");

                    b.Property<int>("FromUserId")
                        .HasColumnType("INT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ToUserId")
                        .HasColumnType("INT");

                    b.HasKey("NID")
                        .HasName("NOTIFICATIONNID_PK");

                    b.HasIndex("AppUserUID");

                    b.HasIndex("AppUserUID1");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Notifications", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Ticket", b =>
                {
                    b.Property<int>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TID"));

                    b.Property<int?>("AgentID")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("Assign_Date")
                        .HasColumnType("datetime2(0)");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Comments")
                        .HasColumnType("NVARCHAR(850)");

                    b.Property<int?>("Due_Minutes")
                        .HasColumnType("INT");

                    b.Property<string>("ImageContentType")
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<bool?>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasMaxLength(850)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(850)")
                        .HasColumnName("Issue");

                    b.Property<int>("LID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("OpenDate");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Solution")
                        .HasColumnType("NVARCHAR(850)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Subject");

                    b.Property<decimal?>("TicketRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("UID")
                        .HasColumnType("INT");

                    b.Property<string>("UserApprove")
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<int?>("UserRate")
                        .HasColumnType("int");

                    b.HasKey("TID")
                        .HasName("TICKETID_PK");

                    b.HasIndex("AgentID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("LID");

                    b.HasIndex("UID");

                    b.ToTable("Tickets", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Tlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("TLOG ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Action");

                    b.Property<int>("TID")
                        .HasColumnType("INT")
                        .HasColumnName("TID");

                    b.Property<int>("UID")
                        .HasColumnType("INT");

                    b.Property<DateTime>("actionTime")
                        .HasColumnType("datetime2(0)")
                        .HasColumnName("Action Time");

                    b.HasKey("Id")
                        .HasName("TLOGID_PK");

                    b.HasIndex("TID");

                    b.HasIndex("UID");

                    b.ToTable("TicketLogs", "dbo");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.AppUser", b =>
                {
                    b.HasOne("AlexSupport.ViewModels.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DID")
                        .IsRequired()
                        .HasConstraintName("FK_AppUser_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.ChatMessage", b =>
                {
                    b.HasOne("AlexSupport.ViewModels.AppUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_APPUSER_CHATMESSAGES");

                    b.HasOne("AlexSupport.ViewModels.Ticket", "Ticket")
                        .WithMany("ChatMessages")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_TICKET_CHATMESSAGES");

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.DailyTasks", b =>
                {
                    b.HasOne("AlexSupport.ViewModels.AppUser", "Agent")
                        .WithMany("DailyTasks")
                        .HasForeignKey("AgentId")
                        .HasConstraintName("FK_DailyTask_AppUser");

                    b.HasOne("AlexSupport.ViewModels.Category", "category")
                        .WithMany("DailyTask")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_DailyTask_Category");

                    b.Navigation("Agent");

                    b.Navigation("category");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.SystemLogs", b =>
                {
                    b.HasOne("AlexSupport.ViewModels.AppUser", "AppUser")
                        .WithMany("SystemLogs")
                        .HasForeignKey("UID")
                        .IsRequired()
                        .HasConstraintName("FK_SystemTLog_AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.SystemNotification", b =>
                {
                    b.HasOne("AlexSupport.ViewModels.AppUser", null)
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("AppUserUID");

                    b.HasOne("AlexSupport.ViewModels.AppUser", null)
                        .WithMany("SentNotifications")
                        .HasForeignKey("AppUserUID1");

                    b.HasOne("AlexSupport.ViewModels.AppUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AlexSupport.ViewModels.AppUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Ticket", b =>
                {
                    b.HasOne("AlexSupport.ViewModels.AppUser", "Agent")
                        .WithMany("AgentTicket")
                        .HasForeignKey("AgentID")
                        .HasConstraintName("FK_Ticket_AgentId");

                    b.HasOne("AlexSupport.ViewModels.Category", "category")
                        .WithMany("Ticket")
                        .HasForeignKey("CategoryID")
                        .HasConstraintName("FK_Ticket_Category");

                    b.HasOne("AlexSupport.ViewModels.Location", "location")
                        .WithMany("Ticket")
                        .HasForeignKey("LID")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_Location");

                    b.HasOne("AlexSupport.ViewModels.AppUser", "User")
                        .WithMany("Ticket")
                        .HasForeignKey("UID")
                        .IsRequired()
                        .HasConstraintName("FK_Ticket_UserId");

                    b.Navigation("Agent");

                    b.Navigation("User");

                    b.Navigation("category");

                    b.Navigation("location");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Tlog", b =>
                {
                    b.HasOne("AlexSupport.ViewModels.Ticket", "Ticket")
                        .WithMany("Tlogs")
                        .HasForeignKey("TID")
                        .IsRequired()
                        .HasConstraintName("FK_Tlog_TicketId");

                    b.HasOne("AlexSupport.ViewModels.AppUser", "AppUser")
                        .WithMany("Tlogs")
                        .HasForeignKey("UID")
                        .IsRequired()
                        .HasConstraintName("FK_Tlog_AppUserId");

                    b.Navigation("AppUser");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.AppUser", b =>
                {
                    b.Navigation("AgentTicket");

                    b.Navigation("ChatMessages");

                    b.Navigation("DailyTasks");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("SystemLogs");

                    b.Navigation("Ticket");

                    b.Navigation("Tlogs");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Category", b =>
                {
                    b.Navigation("DailyTask");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Location", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("AlexSupport.ViewModels.Ticket", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Tlogs");
                });
#pragma warning restore 612, 618
        }
    }
}
